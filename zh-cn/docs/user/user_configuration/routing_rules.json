{
  "filename": "routing_rules.md",
  "__html": "<h1>Dubbo-go v3 统一路由规则</h1>\n<h2>路由规则介绍</h2>\n<p><a href=\"https://www.yuque.com/docs/share/c132d5db-0dcb-487f-8833-7c7732964bd4?#\">《微服务统一路由规则方案草案V2》</a></p>\n<h2>简介</h2>\n<p>路由规则，简单来说就是根据<strong>特定的条件</strong>，将<strong>特定的请求</strong>流量发送到<strong>特定的服务提供者</strong>。从而实现流量的分配。</p>\n<p>在 Dubbo3 统一路由规则的定义中，需要提供两个yaml格式的资源：virtual service 和 destination rule。其格式和 service mesh 定义的路由规则非常相似。</p>\n<ul>\n<li>virtual service</li>\n</ul>\n<p>定义host，用于和destination rule建立联系。<br>\n定义 service 匹配规则<br>\n定义 match 匹配规则<br>\n匹配到特定请求后，进行目标集群的查找和验证，对于为空情况，使用 fallback 机制。</p>\n<ul>\n<li>destination rule</li>\n</ul>\n<p>定义特定集群子集，以及子集所适配的标签，标签从 provider 端暴露的 url 中获取，并尝试匹配。</p>\n<h2>提供能力</h2>\n<h3>文件读入的路由配置</h3>\n<p>sample示例参见<a href=\"https://github.com/apache/dubbo-go-samples/tree/3.0/router/uniform-router/file\">router-file</a></p>\n<h4>1. 路由规则文件注解</h4>\n<p>路由规则只针对客户端，对于服务端，只需要在服务提供时打好特定的参数标签即可。</p>\n<h5>1.1 virtual-service</h5>\n<p>go-client/conf/virtual_service.yml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">service.dubbo.apache.org/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">VirtualService</span>\n<span class=\"hljs-attr\">metadata:</span> <span class=\"hljs-string\">{name:</span> <span class=\"hljs-string\">demo-route}</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">dubbo:</span>\n    <span class=\"hljs-comment\"># 使用正则表达式匹配service名，只有个满足该service名的请求才能路由。</span>\n    <span class=\"hljs-comment\"># 就此例子来说，不满足service名的请求会直接找不到provider</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">services:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">regex:</span> <span class=\"hljs-string\">org.apache.dubbo.UserProvider*</span> <span class=\"hljs-string\">}</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">routedetail:</span>\n        <span class=\"hljs-comment\"># 匹配规则，如果（sourceLabel）客户端url满足存在参数 `trafficLabel: xxx` 的才能匹配成功</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">match:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sourceLabels:</span> <span class=\"hljs-string\">{trafficLabel:</span> <span class=\"hljs-string\">xxx}</span>\n          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">other-condition</span>\n          <span class=\"hljs-attr\">route:</span> <span class=\"hljs-comment\"># 一旦匹配上述match规则，将选择dest_rule.yml里定义的名为other的子集</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">{host:</span> <span class=\"hljs-string\">demo,</span> <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">other}</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">center-match</span>\n          <span class=\"hljs-comment\"># 没有match，兜底逻辑，一定会被匹配到。</span>\n          <span class=\"hljs-attr\">route:</span> <span class=\"hljs-comment\"># 将选择dest_rule.yml里定义的名为center的子集</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">{host:</span> <span class=\"hljs-string\">demo,</span> <span class=\"hljs-attr\">subset:</span> <span class=\"hljs-string\">center}</span>\n\n  <span class=\"hljs-attr\">hosts:</span> <span class=\"hljs-string\">[demo]</span>  <span class=\"hljs-comment\"># 匹配dest_rule.yml里面的host</span>\n\n</code></pre>\n<h5>1.2 destination-rule</h5>\n<p>go-client/conf/dest_rule.yml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">service.dubbo.apache.org/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DestinationRule</span>\n<span class=\"hljs-attr\">metadata:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">demo-route</span> <span class=\"hljs-string\">}</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">demo</span>\n  <span class=\"hljs-attr\">subsets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">all</span>\n      <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">ut:</span> <span class=\"hljs-string\">CENTER</span> <span class=\"hljs-string\">}</span> <span class=\"hljs-comment\"># 选中：服务端url存在 `ut:CENTER` 的键值参数的所有实例作为子集</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">center</span>\n      <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">ut:</span> <span class=\"hljs-string\">other</span> <span class=\"hljs-string\">}</span> <span class=\"hljs-comment\"># 选中：服务端url存在 `ut:other` 的键值参数的所有实例作为子集</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">other</span> <span class=\"hljs-comment\"># 无条件，选择所有实例</span>\n</code></pre>\n<h4>2. client、server 路由参数设置</h4>\n<ul>\n<li>client 端\n在本例子中，go-client/conf/client.yml 可看到如下注释</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># reference config</span>\n<span class=\"hljs-attr\">references:</span>\n  <span class=\"hljs-attr\">\"UserProvider\":</span>\n    <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"demoZk\"</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"dubbo\"</span>\n    <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>\n    <span class=\"hljs-attr\">params:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">trafficLabel:</span> <span class=\"hljs-string\">xxx</span> <span class=\"hljs-string\">}</span>\n<span class=\"hljs-comment\"># If this line is comment, the all requests would be send to server, else the request would</span>\n<span class=\"hljs-comment\"># be sent to both server and server2</span>\n</code></pre>\n<p>可见，params 对于客户端url参数的定义，一旦增加这个参数，根据上述配置的路由规则，就会命中上述 destination 名为 other 的子集，从而对所有 provider 采用负载均衡策略发起调用。<br>\n而如果注释掉这行参数，会将请求路由至 center 子集，针对单一的 server 发起调用。</p>\n<p>在环境变量中配置路由规则文件的路径</p>\n<pre><code class=\"language-shell\">export CONF_VIRTUAL_SERVICE_FILE_PATH=xxx/virtual_service.yml\nexport CONF_DEST_RULE_FILE_PATH=xxx/dest_rule.yml\n</code></pre>\n<ul>\n<li>server 端</li>\n</ul>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># service config</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">\"UserProvider\":</span>\n    <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"demoZk\"</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"dubbo\"</span>\n    <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"org.apache.dubbo.UserProvider\"</span>\n    <span class=\"hljs-attr\">loadbalance:</span> <span class=\"hljs-string\">\"random\"</span>\n    <span class=\"hljs-attr\">warmup:</span> <span class=\"hljs-string\">\"100\"</span>\n    <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">\"failover\"</span>\n    <span class=\"hljs-attr\">params:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">ut:</span> <span class=\"hljs-string\">other</span> <span class=\"hljs-string\">}</span> <span class=\"hljs-comment\"># 服务端标签，destination rule 根据此标签选择子集对应的所有实例</span>\n    <span class=\"hljs-attr\">methods:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"GetUser\"</span>\n        <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-attr\">loadbalance:</span> <span class=\"hljs-string\">\"random\"</span>\n</code></pre>\n<h4>3. 运行方法</h4>\n<p>直接使用goland运行本示例</p>\n<p>router/router-server<br>\nrouter/router-server2<br>\nrouter/router-client</p>\n<p>运行后，可观测到所有客户端流量都路由至 router-server，并没有请求路由至 router-server2</p>\n<h3>基于 K8S 动态更新的路由配置</h3>\n<p>sample示例参见<a href=\"https://github.com/apache/dubbo-go-samples/tree/3.0/router/uniform-router/k8s\">router-k8s</a></p>\n<h4>使用前提</h4>\n<p>本地已安装 docker 和 k8s集群，可通过 kubectl 命令控制集群。</p>\n<h4>使用方法</h4>\n<p><code>sh build.sh</code></p>\n<p>该脚本会先创建 dubbo-workplace 的命名空间，将三个服务依次构建，部署 CRD 资源和注册中心，打包镜像，并将三个服务部署至 K8s 集群。</p>\n<p>client 端会首先从文件中读入路由规则，根据规则将所有流量打入 server，没有流量流至 server2。</p>\n<p>之后尝试修改路由规则，将 dest_rule.yml 的子集标签限制去掉：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">service.dubbo.apache.org/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DestinationRule</span>\n<span class=\"hljs-attr\">metadata:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">demo-route</span> <span class=\"hljs-string\">}</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">demo</span>\n  <span class=\"hljs-attr\">subsets:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">all</span>\n      <span class=\"hljs-attr\">labels:</span> <span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">ut:</span> <span class=\"hljs-string\">CENTER</span> <span class=\"hljs-string\">}</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">center</span>\n<span class=\"hljs-comment\">#      labels: { ut: other } # 注释掉center对应的标签要求</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">other</span>\n</code></pre>\n<p>更新路由规则:</p>\n<pre><code class=\"language-shell\">kubectl apply -f ./go-client/conf/dest_rule.yml -n dubbo-workplace\n</code></pre>\n<p>之后可同时在两个 server 中查看到请求流量</p>\n<h4>删除命名空间</h4>\n<pre><code class=\"language-shell\">kubectl delete ns dubbo-workplace\n</code></pre>\n",
  "link": "/zh-cn/docs/user/user_configuration/routing_rules.html",
  "meta": {
    "title": "Dubbo-go v3 统一路由规则",
    "keywords": "dubbogo，v3，路由规则",
    "description": "提示用户dubbo使用的路由协议，介绍dubbogov3采用的统一路由规则"
  }
}