{
  "filename": "quick-start-dubbo-go.md",
  "__html": "<h1><a href=\"https://studygolang.com/articles/29457\">快速上手 dubbo-go</a></h1>\n<h2>前言</h2>\n<p>每次技术调研总会发现自己学不动了怎么办？用已有的知识来拓展要学习的新知识就好了~ by LinkinStar</p>\n<p>最近需要调研使用 dubbo，之前完全是 0 基础，对于 dubbo 只存在于听说，今天上手实战一把，告诉你如何快速用 go 上手 dubbo</p>\n<p>PS：以下的学习方式适用于很多新技术</p>\n<h2>基本概念</h2>\n<p>首先学习一个技术首先要看看它的整体架构和基本概念，每个技术都有着自己的名词解释和实现方式，如果文档齐全就简单很多。</p>\n<p><a href=\"http://dubbo.apache.org/zh-cn/docs/user/preface/background.html\">http://dubbo.apache.org/zh-cn/docs/user/preface/background.html</a></p>\n<p>大致浏览了背景、需求、架构之后基本上有一个大致概念</p>\n<p>image.png\n其实整体架构和很多微服务的架构都是类似的，就是有一个注册中心管理所有的服务列表，服务提供方先向注册中心注册，而消费方向注册中心请求服务列表，通过服务列表调用最终的服务。总的来说 dubbo 将整个过程封装在了里面，而作为使用者的我们来说更加关心业务实现，它帮我们做好了治理的工作。</p>\n<p>然后我抓住了几个我想要知道的重点：</p>\n<p>注册中心可替换，官方推荐的是 zk\n如果有变更，注册中心将基于长连接推送变更数据给消费者，注册中心，服务提供者，服务消费者三者之间均为长连接\n基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用\n消费者在本地缓存了提供者列表</p>\n<h2>实际上手</h2>\n<p>官网文档中也给出如果使用 golang 开发，那么有 <a href=\"https://github.com/apache/dubbo-go\">https://github.com/apache/dubbo-go</a> 可以用，那么废话不多说，上手实践一把先。因为你看再多，都比不上实践一把来学的快。</p>\n<h3>环境搭建</h3>\n<p>大多数教程就会跟你说，一个 helloWorld 需要 zookeeper 环境，但是不告诉你如何搭建，因为这对于他们来说太简单了，而我不一样，我是 0 基础，那如何快速搭建一个需要调研项目的环境呢？最好的方式就是 docker。</p>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3\"</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">zookeeper:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2181</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">admin:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">apache/dubbo-admin</span>\n    <span class=\"hljs-attr\">depends_on:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8080</span><span class=\"hljs-string\">:8080</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">admin.registry.address=zookeeper://zookeeper:2181</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">admin.config-center=zookeeper://zookeeper:2181</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">admin.metadata-report.address=zookeeper://zookeeper:2181</span>\n</code></pre>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3\"</span>\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">zookeeper:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2181</span><span class=\"hljs-string\">:2181</span>\n  <span class=\"hljs-attr\">admin:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">chenchuxin/dubbo-admin</span>\n    <span class=\"hljs-attr\">depends_on:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">zookeeper</span>\n    <span class=\"hljs-attr\">ports:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">8080</span><span class=\"hljs-string\">:8080</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo.registry.address=zookeeper://zookeeper:2181</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo.admin.root.password=root</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">dubbo.admin.guest.password=guest</span>\n</code></pre>\n<p>上面两个 docker-compose 文件一个是官方提供的管理工具，一个包含的是个人修改之后的管理工具，记住这里有个用户名密码是 root-root，看你喜欢</p>\n<p>废话不多说，直接创建 docker-compose.yaml 然后 <code>docker-compose up</code> 你就得到了一个环境，棒 👍</p>\n<h3>样例下载</h3>\n<p>有的技术会给出官方的实验样例，dubbo-go 也不例外</p>\n<p><a href=\"https://github.com/apache/dubbo-samples\">https://github.com/apache/dubbo-samples</a></p>\n<p>里面包含了 go 和 java 的样例，有了它你就能快速上手了，把它下载到本地</p>\n<h3>样例运行</h3>\n<p>首先要做的第一步就是把 helloworld 给跑起来，进入 golang 目录，里面有个 <a href=\"http://README.md\">README.md</a> 看一下。然后开搞。</p>\n<p>打开一个终端运行服务方</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-built_in\">export</span> ARCH=mac\n<span class=\"hljs-built_in\">export</span> ENV=dev\n<span class=\"hljs-built_in\">cd</span> helloworld/dubbo/go-server\nsh ./assembly/<span class=\"hljs-variable\">$ARCH</span>/<span class=\"hljs-variable\">$ENV</span>.sh\n<span class=\"hljs-built_in\">cd</span> ./target/linux/user_info_server-0.3.1-20190517-0930-release\nsh ./bin/load.sh start\n</code></pre>\n<p>打开另一个终端运行客户端</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-built_in\">export</span> ARCH=mac\n<span class=\"hljs-built_in\">export</span> ENV=dev\n<span class=\"hljs-built_in\">cd</span> helloworld/dubbo/go-client\nsh ./assembly/<span class=\"hljs-variable\">$ARCH</span>/<span class=\"hljs-variable\">$ENV</span>.sh\n<span class=\"hljs-built_in\">cd</span> ./target/linux/user_info_client-0.3.1-20190517-0921-release\nsh ./bin/load_user_info_client.sh start\n</code></pre>\n<p>启动过程中会出现一些警告，问题不大，如果成功，那么客户端会有一个调用服务端的请求，并在控制台中以白色底色进行打印</p>\n<p>image.png\njava 的服务也有相对应的启动方式，按照 README 中所说明的也可以进行注册和调用，并且 java 和 go 之间是可以互相调用的</p>\n<h3>查看服务</h3>\n<p>因为我们部署的时候有一个 dubbo-admin 用于管理 zk 上注册的服务，我们可以访问本地的 8080 端口看到对应的服务情况</p>\n<p>image.png\n至此你应该已经对于整体的链路调用有一个大致的认识，结合之前官网文档的中的架构图，应该也清晰了。</p>\n<h2>如何使用</h2>\n<p>那么现在你已经运行起来了，那么势必就要来看看具体是如何进行使用的了。</p>\n<h3>服务端</h3>\n<p>服务端，也就是服务提供者；</p>\n<p>位置在：dubbo-samples/golang/helloworld/dubbo/go-server/app</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// 将服务进行注册</span>\nconfig.SetProviderService(<span class=\"hljs-built_in\">new</span>(UserProvider))\n<span class=\"hljs-comment\">// 注册对象的hessian序列化</span>\nhessian.RegisterPOJO(&amp;User{})\n</code></pre>\n<p>是不是看起来其实很简单，其实重点就是上面两句代码了\n对于服务本身来说</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">GetUser</span><span class=\"hljs-params\">(ctx context.Context, req []<span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(*User, error)</span></span> {\n    <span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"req:%#v\"</span>, req)\n    rsp := User{<span class=\"hljs-string\">\"A001\"</span>, <span class=\"hljs-string\">\"Alex Stocks\"</span>, <span class=\"hljs-number\">18</span>, time.Now()}\n    <span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"rsp:%#v\"</span>, rsp)\n    <span class=\"hljs-keyword\">return</span> &amp;rsp, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"UserProvider\"</span>\n}\n</code></pre>\n<p>其实就是需要实现下面那个接口就可以了</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// rpc service interface</span>\n<span class=\"hljs-keyword\">type</span> RPCService <span class=\"hljs-keyword\">interface</span> {\n    Reference() <span class=\"hljs-keyword\">string</span> <span class=\"hljs-comment\">// rpc service id or reference id</span>\n}\n</code></pre>\n<p>其中有一步骤不要忘记了是 config.Load()，会加载配置文件的相关配置，不然你以为注册中心的地址等等是在哪里配置的呢？</p>\n<p>客户端\n看了服务端，其实客户端也就很简单了</p>\n<pre><code class=\"language-go\">config.SetConsumerService(userProvider)\nhessian.RegisterPOJO(&amp;User{})\n</code></pre>\n<p>其实也是差不多的，也需要注册一个消费服务，并将序列化方式给注册上去</p>\n<pre><code class=\"language-go\">user := &amp;User{}\nerr := userProvider.GetUser(context.TODO(), []<span class=\"hljs-keyword\">interface</span>{}{<span class=\"hljs-string\">\"A001\"</span>}, user)\n</code></pre>\n<p>使用也就很简单了，同样的也需要实现 Reference 接口</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n    GetUser <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, req []<span class=\"hljs-keyword\">interface</span>{}, rsp *User)</span> <span class=\"hljs-title\">error</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"UserProvider\"</span>\n}\n</code></pre>\n<p>回头想想\n当我们看完了代码的上的使用，再回头想想 dubbo 的作用，你就会发现其实 dubbo 帮你做的事情真的屏蔽了很多。</p>\n<ul>\n<li>你不需要关心服务是怎么注册的</li>\n<li>你不需要关心服务是怎么获取的</li>\n<li>你不需要关系服务是怎么调用的</li>\n<li>甚至序列化的过程都是基本透明的</li>\n<li>想对比来说，如果让你自己去是实现微服务，那是不是说，你需要实现服务的拉取，服务的负载均衡，服务的发现，序列化.....</li>\n</ul>\n<p>这下你应该明白了 dubbo 是做什么的也就明白了它为什么会出现了</p>\n<h2>其他能力</h2>\n<p>当你学习了一个技术的基本使用之后，要学习其他的能力，以便在使用的过程中不会出现自己重复造轮子或者说有轮子没用到的情况，<a href=\"https://github.com/apache/dubbo-samples\">https://github.com/apache/dubbo-samples</a> 不止有 helloworld 还要很多别的案例供你参考，你可以继续看看并进行试验。</p>\n<h3>支持扩展</h3>\n<p><a href=\"https://github.com/apache/dubbo-go\">https://github.com/apache/dubbo-go</a></p>\n<p>在 Feature list 中列举了 dubbo-go 所支持的相关功能，比如序列化，比如注册中心，在比如过滤器。</p>\n<p>也就是说，在使用 dubbo-go 的时候相关功能都是插件化的，想用什么就看你自己了，比如注册中心我想用 etcd，比如调用的协议我想换成 grpc 都可以。</p>\n<h2>相关问题</h2>\n<p>对于一个技术调研，那么肯定会有相关问题等着你去发现去考虑。</p>\n<p>下面是我能想到的一些问题：</p>\n<p>当前 dubbo-go 的版本最高在 1.4，所对应的 dubbo 版本应该是 2.6.x，如果调用更高版本的服务是否会有问题\njava 和 go 之间互相调用，各种类型转换之间是否存在问题，是否容易出现无法正确反序列化的问题</p>\n<h2>后续学习</h2>\n<p>那么上面只是说能让你上手 dubbo-go，但是实际使用可能存在距离。为什么这么说呢？如果你在不动里面任何的原理情况下，那么如果遇到问题，你很可能就束手无策了。比如如果线上服务无法正常发现，你应该如何排查？调用过程中出现问题如何定位？</p>\n<p>所以后续你需要做的是：</p>\n<p>看看整体设计架构和思路，明白整条链路调用过程和规则\n学习它的接口设计，为什么别人设计的接口能兼容那么多的注册中心？如果让你来设计你怎么设计呢？\n性能也很重要，网上说性能很不错，为什么呢？什么地方做了优化，负载均衡的算法是怎么样的，你能自定义吗？</p>\n<h2>总结</h2>\n<p>总的来说，对于 dubbo-go 整体的使用上还是非常好上手的，自己想了一下，如果当前项目想要接入的话，主要是服务的暴露、序列化方式、鉴权调整等存在开发工作。</p>\n<p>上面砖头也抛的差不多了，对于你快速上手应该没有问题了，剩下的就要靠你自己了。</p>\n",
  "link": "/zh-cn/docs/md/course/quick-start-dubbo-go.html",
  "meta": {
    "title": "快速上手 dubbo-go",
    "keywords": "快速上手 dubbo-go",
    "description": "dubbo-go 快速接入方式介绍"
  }
}