{
  "filename": "mosn-performance-optimization.md",
  "__html": "<h1><a href=\"https://gocn.vip/topics/10492\">记一次在 mosn 对 dubbo、dubbo-go-hessian2 的性能优化</a></h1>\n<h3>背景</h3>\n<p>蚂蚁内部对 Service Mesh 的稳定性和性能要求是比较高的，内部 mosn 广泛用于生产环境。在云上和开源社区，RPC 领域 dubbo 和 spring cloud 同样广泛用于生产环境，我们在 mosn 基础上，支持了 dubbo 和 spring cloud 流量代理。我们发现在支持 dubbo 协议过程中，经过 Mesh 流量代理后，性能有非常大的性能损耗，在大商户落地 Mesh 中也对性能有较高要求，因此本文会重点描述在基于 Go 语言库 <a href=\"https://github.com/apache/dubbo-go-hessian2\">dubbo-go-hessian2</a> 、dubbo 协议中对 <a href=\"https://github.com/mosn/mosn\">mosn</a> 所做的性能优化。</p>\n<h3>性能优化概述</h3>\n<p>根据实际业务部署场景，并没有选用高性能机器，使用普通 linux 机器，配置和压测参数如下：</p>\n<ul>\n<li>Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz 4 核 16G 。</li>\n<li>pod 配置 <code>2c、1g</code>，JVM 参数 <code>-server -Xms1024m -Xmx1024m</code>。</li>\n<li>网络延迟 0.23 ms, 2 台 linux 机器，分别部署 server + mosn, 压测程序 <a href=\"https://github.com/zonghaishang/rpc-performance\">rpc-perfomance</a>。</li>\n</ul>\n<p>经过 3 轮性能优化后，使用优化版本 mosn 将会获得以下性能收益（框架随机 512 和 1k 字节压测）：</p>\n<ul>\n<li>512 字节数据：mosn + dubbo 服务调用 TPS 整体提升 55-82.8%，RT 降低 45% 左右，内存占用 40M，</li>\n<li>1k 数据：mosn + dubbo 服务调用 TPS 整体提升 51.1-69.3%，RT 降低 41%左右, 内存占用 41M。</li>\n</ul>\n<h3>性能优化工具 pprof</h3>\n<p>磨刀不误砍柴工，在性能优化前首先要找到性能卡点，找到性能卡点后，另一个难点就是如何用高效代码优化替代 slow code。因为蚂蚁 Service Mesh 是基于 go 语言实现的，我们首选 go 自带的 pprof 性能工具，我们简要介绍这个工具如何使用。如果我们 go 库自带 http.Server 时并且在 main 头部导入<code>import _ &quot;net/http/pprof&quot;</code>，go 会帮我们挂载对应的 handler , 详细可以参考 <a href=\"https://pkg.go.dev/net/http/pprof?tab=doc\">godoc</a> 。</p>\n<p>因为 mosn 默认会在<code>34902</code>端口暴露 http 服务，通过以下命令轻松获取 mosn 的性能诊断文件：</p>\n<pre><code>go tool pprof -seconds 60 http://benchmark-server-ip:34902/debug/pprof/profile\n# 会生成类似以下文件，该命令采样cpu 60秒\n# pprof.mosn.samples.cpu.001.pb.gz\n</code></pre>\n<p>然后继续用 pprof 打开诊断文件，方便在浏览器查看，在图 1-1 给出压测后 profiler 火焰图：</p>\n<pre><code># http=:8000代表pprof打开8000端口然后用于web浏览器分析\n# mosnd代表mosn的二进制可执行文件，用于分析代码符号\n# pprof.mosn.samples.cpu.001.pb.gz是cpu诊断文件\ngo tool pprof -http=:8000 mosnd pprof.mosn.samples.cpu.001.pb.gz\n</code></pre>\n<p><img src=\"../../pic/hessian2/mosn-performance-optimization-1.png\" alt=\"mosn性能诊断火焰图\"></p>\n<center>图 1-1 mosn 性能压测火焰图</center>\n<p>在获得诊断数据后，可以切到浏览器 Flame Graph（火焰图，go 1.11 以上版本自带），火焰图的 x 轴坐标代表 CPU 消耗情况， y 轴代码方法调用堆栈。在优化开始之前，我们借助 go 工具 pprof 可以诊断出大致的性能卡点在以下几个方面（直接压 server 端 mosn）：</p>\n<ul>\n<li>mosn 在接收 dubbo 请求，CPU 卡点在 streamConnection.Dispatch</li>\n<li>mosn 在转发 dubbo 请求，CPU 卡点在 downStream.Receive</li>\n</ul>\n<p>可以点击火焰图任意横条，进去查看长方块耗时和堆栈明细（请参考图 1-2 和 1-3 所示）：</p>\n<p><img src=\"../../pic/hessian2/mosn-performance-optimization-2.png\" alt=\"1-2\">)</p>\n<center>图 1-2 Dispatch 火焰图明细 </center>\n<p><img src=\"../../pic/hessian2/mosn-performance-optimization-3.png\" alt=\"1-3\"></p>\n<center>图 1-3 Receive 火焰图明细 </center>\n<h3>性能优化思路</h3>\n<p>本文重点记录优化了哪些 case 才能提升 50%以上的吞吐量和降低 RT，因此后面直接分析当前优化了哪些 case。在此之前，我们以 Dispatch 为例，看下它为甚么那么吃性能 。在 terminal 中通过以下命令可以查看代码行耗费 CPU 数据（代码有删减）：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">go</span> tool pprof mosnd pprof.mosn.samples.cpu<span class=\"hljs-number\">.001</span>.pb.gz\n(pprof) list Dispatch\nTotal: <span class=\"hljs-number\">1.75</span>mins\n     <span class=\"hljs-number\">370</span>ms     <span class=\"hljs-number\">37.15</span>s (flat, cum) <span class=\"hljs-number\">35.46</span>% of Total\n      <span class=\"hljs-number\">10</span>ms       <span class=\"hljs-number\">10</span>ms    <span class=\"hljs-number\">123</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(conn *streamConnection)</span> <span class=\"hljs-title\">Dispatch</span><span class=\"hljs-params\">(buffer types.IoBuffer)</span></span> {\n      <span class=\"hljs-number\">40</span>ms      <span class=\"hljs-number\">630</span>ms    <span class=\"hljs-number\">125</span>:\tlog.DefaultLogger.Tracef(<span class=\"hljs-string\">\"stream connection dispatch data string = %v\"</span>, buffer.String())\n         .          .    <span class=\"hljs-number\">126</span>:\n         .          .    <span class=\"hljs-number\">127</span>:\t<span class=\"hljs-comment\">// get sub protocol codec</span>\n         .      <span class=\"hljs-number\">250</span>ms    <span class=\"hljs-number\">128</span>:\trequestList := conn.codec.SplitFrame(buffer.Bytes())\n      <span class=\"hljs-number\">20</span>ms       <span class=\"hljs-number\">20</span>ms    <span class=\"hljs-number\">129</span>:\t<span class=\"hljs-keyword\">for</span> _, request := <span class=\"hljs-keyword\">range</span> requestList {\n      <span class=\"hljs-number\">10</span>ms      <span class=\"hljs-number\">160</span>ms    <span class=\"hljs-number\">134</span>:\t\theaders := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>)\n         .          .    <span class=\"hljs-number\">135</span>:\t\t<span class=\"hljs-comment\">// support dynamic route</span>\n      <span class=\"hljs-number\">50</span>ms      <span class=\"hljs-number\">920</span>ms    <span class=\"hljs-number\">136</span>:\t\theaders[strings.ToLower(protocol.MosnHeaderHostKey)] = conn.connection.RemoteAddr().String()\n         .          .    <span class=\"hljs-number\">149</span>:\n         .          .    <span class=\"hljs-number\">150</span>:\t\t<span class=\"hljs-comment\">// get stream id</span>\n      <span class=\"hljs-number\">10</span>ms      <span class=\"hljs-number\">440</span>ms    <span class=\"hljs-number\">151</span>:\t\tstreamID := conn.codec.GetStreamID(request)\n         .          .    <span class=\"hljs-number\">156</span>:\t\t<span class=\"hljs-comment\">// request route</span>\n         .       <span class=\"hljs-number\">50</span>ms    <span class=\"hljs-number\">157</span>:\t\trequestRouteCodec, ok := conn.codec.(xprotocol.RequestRouting)\n         .          .    <span class=\"hljs-number\">158</span>:\t\t<span class=\"hljs-keyword\">if</span> ok {\n         .     <span class=\"hljs-number\">20.11</span>s    <span class=\"hljs-number\">159</span>:\t\t\trouteHeaders := requestRouteCodec.GetMetas(request)\n         .          .    <span class=\"hljs-number\">165</span>:\t\t}\n         .          .    <span class=\"hljs-number\">166</span>:\n         .          .    <span class=\"hljs-number\">167</span>:\t\t<span class=\"hljs-comment\">// tracing</span>\n      <span class=\"hljs-number\">10</span>ms       <span class=\"hljs-number\">80</span>ms    <span class=\"hljs-number\">168</span>:\t\ttracingCodec, ok := conn.codec.(xprotocol.Tracing)\n         .          .    <span class=\"hljs-number\">169</span>:\t\t<span class=\"hljs-keyword\">var</span> span types.Span\n         .          .    <span class=\"hljs-number\">170</span>:\t\t<span class=\"hljs-keyword\">if</span> ok {\n      <span class=\"hljs-number\">10</span>ms      <span class=\"hljs-number\">1.91</span>s    <span class=\"hljs-number\">171</span>:\t\t\tserviceName := tracingCodec.GetServiceName(request)\n         .      <span class=\"hljs-number\">2.17</span>s    <span class=\"hljs-number\">172</span>:\t\t\tmethodName := tracingCodec.GetMethodName(request)\n         .          .    <span class=\"hljs-number\">176</span>:\n         .          .    <span class=\"hljs-number\">177</span>:\t\t\t<span class=\"hljs-keyword\">if</span> trace.IsEnabled() {\n         .       <span class=\"hljs-number\">50</span>ms    <span class=\"hljs-number\">179</span>:\t\t\t\ttracer := trace.Tracer(protocol.Xprotocol)\n         .          .    <span class=\"hljs-number\">180</span>:\t\t\t\t<span class=\"hljs-keyword\">if</span> tracer != <span class=\"hljs-literal\">nil</span> {\n      <span class=\"hljs-number\">20</span>ms      <span class=\"hljs-number\">1.66</span>s    <span class=\"hljs-number\">181</span>:\t\t\t\t\tspan = tracer.Start(conn.context, headers, time.Now())\n         .          .    <span class=\"hljs-number\">182</span>:\t\t\t\t}\n         .          .    <span class=\"hljs-number\">183</span>:\t\t\t}\n         .          .    <span class=\"hljs-number\">184</span>:\t\t}\n         .          .    <span class=\"hljs-number\">185</span>:\n         .      <span class=\"hljs-number\">110</span>ms    <span class=\"hljs-number\">186</span>:\t\treqBuf := networkbuffer.NewIoBufferBytes(request)\n         .          .    <span class=\"hljs-number\">188</span>:\t\t<span class=\"hljs-comment\">// append sub protocol header</span>\n      <span class=\"hljs-number\">10</span>ms      <span class=\"hljs-number\">950</span>ms    <span class=\"hljs-number\">189</span>:\t\theaders[types.HeaderXprotocolSubProtocol] = <span class=\"hljs-keyword\">string</span>(conn.subProtocol)\n      <span class=\"hljs-number\">10</span>ms      <span class=\"hljs-number\">4.96</span>s    <span class=\"hljs-number\">190</span>:\t\tconn.OnReceive(ctx, streamID, protocol.CommonHeader(headers), reqBuf, span, isHearbeat)\n      <span class=\"hljs-number\">30</span>ms       <span class=\"hljs-number\">60</span>ms    <span class=\"hljs-number\">191</span>:\t\tbuffer.Drain(requestLen)\n         .          .    <span class=\"hljs-number\">192</span>:\t}\n         .          .    <span class=\"hljs-number\">193</span>:}\n</code></pre>\n<p>通过上面 <code>list Dispatch</code> 命令，性能卡点主要分布在 <code>159</code> 、 <code>171</code> 、<code>172</code> 、 <code>181</code> 、和 <code>190</code> 等行，主要卡点在解码 dubbo 参数、重复解参数、tracer、发序列化和 log 等。</p>\n<h4>1. 优化 dubbo 解码 GetMetas</h4>\n<p>我们通过解码 dubbo 的 body 可以获得以下信息，调用的目标接口（ interface ）和调用方法的服务分组（ group ）等信息，但是需要跳过所有业务方法参数，目前使用开源的 <a href=\"https://github.com/apache/dubbo-go-hessian2\">dubbo-go-hessian2</a> 库，解析 string 和 map 性能较差, 提升 hessian 库解码性能，会在本文后面讲解。</p>\n<p><strong>优化思路：</strong></p>\n<p>在 mosn 的 ingress 端（ mosn 直接转发请求给本地 java server 进程）, 我们根据请求的 path 和 version 窥探用户使用的 interface 和 group , 构建正确的 dataID 可以进行无脑转发，无需解码 body，榨取性能提升。</p>\n<p>我们可以在服务注册时，构建服务发布的 path 、version 和 group 到 interface 、group 映射。在 mosn 转发 dubbo 请求时可以通过读锁查 cache + 跳过解码 body，加速 mosn 性能。</p>\n<p>因此我们构建以下 cache 实现（数组 + 链表数据结构）, 可参见 <a href=\"https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-f5ff30debd68b8318c8236a0b5ccde07R6\">优化代码 diff</a> ：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// metadata.go</span>\n<span class=\"hljs-comment\">// DubboPubMetadata dubbo pub cache metadata</span>\n<span class=\"hljs-keyword\">var</span> DubboPubMetadata = &amp;Metadata{}\n\n<span class=\"hljs-comment\">// DubboSubMetadata dubbo sub cache metadata</span>\n<span class=\"hljs-keyword\">var</span> DubboSubMetadata = &amp;Metadata{}\n\n<span class=\"hljs-comment\">// Metadata cache service pub or sub metadata.</span>\n<span class=\"hljs-comment\">// speed up for decode or encode dubbo peformance.</span>\n<span class=\"hljs-comment\">// please do not use outside of the dubbo framwork.</span>\n<span class=\"hljs-keyword\">type</span> Metadata <span class=\"hljs-keyword\">struct</span> {\n\tdata <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]*Node\n\tmu   sync.RWMutex <span class=\"hljs-comment\">// protect data internal</span>\n}\n\n<span class=\"hljs-comment\">// Find cached pub or sub metatada.</span>\n<span class=\"hljs-comment\">// caller should be check match is true</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Metadata)</span> <span class=\"hljs-title\">Find</span><span class=\"hljs-params\">(path, version <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(node *Node, matched <span class=\"hljs-keyword\">bool</span>)</span></span> {\n\t<span class=\"hljs-comment\">// we found nothing</span>\n\t<span class=\"hljs-keyword\">if</span> m.data == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span>\n\t}\n\n\tm.mu.RLocker().Lock()\n\t<span class=\"hljs-comment\">// for performance</span>\n\t<span class=\"hljs-comment\">// m.mu.RLocker().Unlock() should be called.</span>\n\n\t<span class=\"hljs-comment\">// we check head node first</span>\n\thead := m.data[path]\n\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> || head.count &lt;= <span class=\"hljs-number\">0</span> {\n\t\tm.mu.RLocker().Unlock()\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">false</span>\n\t}\n\n\tnode = head.Next\n\t<span class=\"hljs-comment\">// just only once, just return</span>\n\t<span class=\"hljs-comment\">// for dubbo framwork, that's what we're expected.</span>\n\t<span class=\"hljs-keyword\">if</span> head.count == <span class=\"hljs-number\">1</span> {\n\t\tm.mu.RLocker().Unlock()\n\t\t<span class=\"hljs-keyword\">return</span> node, <span class=\"hljs-literal\">true</span>\n\t}\n\n\t<span class=\"hljs-keyword\">var</span> count <span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">var</span> found *Node\n\n\t<span class=\"hljs-keyword\">for</span> ; node != <span class=\"hljs-literal\">nil</span>; node = node.Next {\n\t\t<span class=\"hljs-keyword\">if</span> node.Version == version {\n\t\t\t<span class=\"hljs-keyword\">if</span> found == <span class=\"hljs-literal\">nil</span> {\n\t\t\t\tfound = node\n\t\t\t}\n\t\t\tcount++\n\t\t}\n\t}\n\n\tm.mu.RLocker().Unlock()\n\t<span class=\"hljs-keyword\">return</span> found, count == <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-comment\">// Register pub or sub metadata</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(m *Metadata)</span> <span class=\"hljs-title\">Register</span><span class=\"hljs-params\">(path <span class=\"hljs-keyword\">string</span>, node *Node)</span></span> {\n\tm.mu.Lock()\n\t<span class=\"hljs-comment\">// for performance</span>\n\t<span class=\"hljs-comment\">// m.mu.Unlock() should be called.</span>\n\n\t<span class=\"hljs-keyword\">if</span> m.data == <span class=\"hljs-literal\">nil</span> {\n\t\tm.data = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]*Node, <span class=\"hljs-number\">4</span>)\n\t}\n\n\t<span class=\"hljs-comment\">// we check head node first</span>\n\thead := m.data[path]\n\t<span class=\"hljs-keyword\">if</span> head == <span class=\"hljs-literal\">nil</span> {\n\t\thead = &amp;Node{\n\t\t\tcount: <span class=\"hljs-number\">1</span>,\n\t\t}\n\t\t<span class=\"hljs-comment\">// update head</span>\n\t\tm.data[path] = head\n\t}\n\n\tinsert := &amp;Node{\n\t\tService: node.Service,\n\t\tVersion: node.Version,\n\t\tGroup:   node.Group,\n\t}\n\n\tnext := head.Next\n\t<span class=\"hljs-keyword\">if</span> next == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-comment\">// fist insert, just insert to head</span>\n\t\thead.Next = insert\n\t\t<span class=\"hljs-comment\">// record last element</span>\n\t\thead.last = insert\n\t\tm.mu.Unlock()\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\n\t<span class=\"hljs-comment\">// we check already exist first</span>\n\t<span class=\"hljs-keyword\">for</span> ; next != <span class=\"hljs-literal\">nil</span>; next = next.Next {\n\t\t<span class=\"hljs-comment\">// we found it</span>\n\t\t<span class=\"hljs-keyword\">if</span> next.Version == node.Version &amp;&amp; next.Group == node.Group {\n\t\t\t<span class=\"hljs-comment\">// release lock and no nothing</span>\n\t\t\tm.mu.Unlock()\n\t\t\t<span class=\"hljs-keyword\">return</span>\n\t\t}\n\t}\n\n\thead.count++\n\t<span class=\"hljs-comment\">// append node to the end of the list</span>\n\thead.last.Next = insert\n\t<span class=\"hljs-comment\">// update last element</span>\n\thead.last = insert\n\tm.mu.Unlock()\n}\n</code></pre>\n<p>通过服务注册时构建好的 cache，可以在 mosn 的 stream 做解码时命中 cache , 无需解码参数获取接口和 group 信息，可参见<a href=\"https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-73d1153005841c788c91116915f460a5R188\">优化代码 diff</a> :</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// decoder.go</span>\n<span class=\"hljs-comment\">// for better performance.</span>\n<span class=\"hljs-comment\">// If the ingress scenario is not using group,</span>\n<span class=\"hljs-comment\">// we can skip parsing attachment to improve performance</span>\n<span class=\"hljs-keyword\">if</span> listener == IngressDubbo {\n\t<span class=\"hljs-keyword\">if</span> node, matched = DubboPubMetadata.Find(path, version); matched {\n\t\tmeta[ServiceNameHeader] = node.Service\n\t\tmeta[GroupNameHeader] = node.Group\n\t}\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> listener == EgressDubbo {\n\t<span class=\"hljs-comment\">// for better performance.</span>\n\t<span class=\"hljs-comment\">// If the egress scenario is not using group,</span>\n\t<span class=\"hljs-comment\">// we can skip parsing attachment to improve performance</span>\n\t<span class=\"hljs-keyword\">if</span> node, matched = DubboSubMetadata.Find(path, version); matched {\n\t\tmeta[ServiceNameHeader] = node.Service\n\t\tmeta[GroupNameHeader] = node.Group\n\t}\n}\n</code></pre>\n<p>在 mosn 的 egress 端（ mosn 直接转发请求给本地 java client 进程）, 我们采用类似的思路, 我们根据请求的 path 和 version 去窥探用户使用的 interface 和 group , 构建正确的 dataID 可以进行无脑转发，无需解码 body，榨取性能提升。</p>\n<h4>2. 优化 dubbo 解码参数</h4>\n<p>在 dubbo 解码参数值的时候 ，mosn 采用的是 hessian 的正则表达式查找，非常耗费性能。我们先看下优化前后 benchmark 对比, 性能提升 50 倍。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">go</span> test -bench=BenchmarkCountArgCount -run=^$ -benchmem\nBenchmarkCountArgCountByRegex<span class=\"hljs-number\">-12</span>\t<span class=\"hljs-number\">200000</span>\t<span class=\"hljs-number\">6236</span> ns/op\t<span class=\"hljs-number\">1472</span> B/op\t<span class=\"hljs-number\">24</span> allocs/op\nBenchmarkCountArgCountOptimized<span class=\"hljs-number\">-12</span>\t<span class=\"hljs-number\">10000000</span>\t<span class=\"hljs-number\">124</span> ns/op\t<span class=\"hljs-number\">0</span> B/op\t<span class=\"hljs-number\">0</span> allocs/op\n</code></pre>\n<p><strong>优化思路：</strong></p>\n<p>可以消除正则表达式，采用简单字符串解析识别参数类型个数， <a href=\"https://github.com/zonghaishang/dubbo/blob/e0fd702825a274379fb609229bdb06ca0586122e/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ReflectUtils.java#L370\">dubbo 编码参数个数字符串实现</a> 并不复杂, 主要给对象加 L 前缀、数组加[、primitive 类型有单字符代替。采用 go 可以实现同等解析, 可以参考<a href=\"https://github.com/mosn/mosn/pull/1174/commits/9020ee9995cd15a7a4321a375a9506cf94dc70a8#diff-73d1153005841c788c91116915f460a5R245\">优化代码 diff</a> ：</p>\n<pre><code>func getArgumentCount(desc string) int {\n\tlen := len(desc)\n\tif len == 0 {\n\t\treturn 0\n\t}\n\n\tvar args, next = 0, false\n\tfor _, ch := range desc {\n\n\t\t// is array ?\n\t\tif ch == '[' {\n\t\t\tcontinue\n\t\t}\n\n\t\t// is object ?\n\t\tif next &amp;&amp; ch != ';' {\n\t\t\tcontinue\n\t\t}\n\n\t\tswitch ch {\n\t\tcase 'V', // void\n\t\t\t'Z', // boolean\n\t\t\t'B', // byte\n\t\t\t'C', // char\n\t\t\t'D', // double\n\t\t\t'F', // float\n\t\t\t'I', // int\n\t\t\t'J', // long\n\t\t\t'S': // short\n\t\t\targs++\n\t\tdefault:\n\t\t\t// we found object\n\t\t\tif ch == 'L' {\n\t\t\t\targs++\n\t\t\t\tnext = true\n\t\t\t\t// end of object ?\n\t\t\t} else if ch == ';' {\n\t\t\t\tnext = false\n\t\t\t}\n\t\t}\n\n\t}\n\treturn args\n}\n</code></pre>\n<h4>3. 优化 dubbo hessian go 解码 string 性能</h4>\n<p>在图 1-2 中可以看到 dubbo hessian go 在解码 string 占比 CPU 采样较高，我们在解码 dubbo 请求时，会解析 dubbo 框架版本、调用 path 、接口版本和方法名，这些都是 string 类型，dubbo hessian go 解析 string 会影响 RPC 性能。</p>\n<p>我们首先跑一下 benchmar k 前后解码 string 性能对比，性能提升 56.11%， 对应到 RPC 中有 5% 左右提升。</p>\n<pre><code>BenchmarkDecodeStringOriginal-12     1967202     613 ns/op     272 B/op     6 allocs/op\nBenchmarkDecodeStringOptimized-12     4477216     269 ns/op     224 B/op     5 allocs/op\n</code></pre>\n<p><strong>优化思路：</strong></p>\n<p>直接使用 UTF-8 byte 解码，性能最高，之前先解码 byte 成 rune , 对 rune 解码成 string ，及其耗费性能。增加批量 string chunk copy ，降低 read 调用，并且使用 unsafe 转换 string （避免一些校验），因为代码优化 diff 较多，这里给出<a href=\"https://github.com/apache/dubbo-go-hessian2/pull/188\">优化代码 PR</a> 。</p>\n<p>go SDK 代码<code>runtime/string.go#slicerunetostring</code>（ rune 转换成 string ）， 同样是把 rune 转成 byte 数组，这里给了我优化思路启发。</p>\n<h4>4. 优化 hessian 库编解码对象</h4>\n<p>虽然消除了 dubbo 的 body 解码部分，但是 mosn 在处理 dubbo 请求时，必须要借助 hessian 去 decode 请求头部的框架版本、请求 path 和接口版本值。但是每次在解码的时候都会创建序列化对象，开销非常高，因为 hessian 每次在创建 reader 的时候会 allocate 4k 数据并 reset。</p>\n<pre><code>      10ms       10ms     75:func unSerialize(serializeId int, data []byte, parseCtl unserializeCtl) *dubboAttr {\n      10ms      140ms     82:\tattr := &amp;dubboAttr{}\n      80ms      2.56s     83:\tdecoder := hessian.NewDecoderWithSkip(data[:])\nROUTINE ======================== bufio.NewReaderSize in /usr/local/go/src/bufio/bufio.go\n      50ms      2.44s (flat, cum)  2.33% of Total\n         .      220ms     55:\tr := new(Reader)\n      50ms      2.22s     56:\tr.reset(make([]byte, size), rd)\n         .          .     57:\treturn r\n         .          .     58:}\n</code></pre>\n<p>我们可以写个池化内存前后性能对比, 性能提升 85.4% , <a href=\"https://github.com/zonghaishang/dubbo-go-hessian2/blob/9b418c4e2700964f244e6b982855b4e89b45990d/string_test.go#L161\">benchmark 用例</a> ：</p>\n<pre><code class=\"language-go\">BenchmarkNewDecoder<span class=\"hljs-number\">-12</span>\t<span class=\"hljs-number\">1487685</span>\t<span class=\"hljs-number\">803</span> ns/op\t<span class=\"hljs-number\">4528</span> B/op\t<span class=\"hljs-number\">9</span> allocs/op\nBenchmarkNewDecoderOptimized<span class=\"hljs-number\">-12</span>\t<span class=\"hljs-number\">10564024</span>\t<span class=\"hljs-number\">117</span> ns/op\t<span class=\"hljs-number\">128</span> B/op\t<span class=\"hljs-number\">3</span> allocs/op\n</code></pre>\n<p><strong>优化思路：</strong></p>\n<p>在每次编解码时，池化 hessian 的 decoder 对象，新增 NewCheapDecoderWithSkip 并支持 reset 复用 decoder 。</p>\n<pre><code>var decodePool = &amp;sync.Pool{\n    New: func() interface{} {\n        return hessian.NewCheapDecoderWithSkip([]byte{})\n    },\n}\n\n// 在解码时按照如下方法调用\ndecoder := decodePool.Get().(*hessian.Decoder)\n// fill decode data\ndecoder.Reset(data[:])\nhessianPool.Put(decoder)\n</code></pre>\n<h4>5. 优化重复解码 service 和 methodName 值</h4>\n<p>xprotocol 在实现 xprotocol.Tracing 获取服务名称和方法时，会触发调用并解析 2 次，调用开销比较大。</p>\n<pre><code>      10ms      1.91s    171:\t\t\tserviceName := tracingCodec.GetServiceName(request)\n         .      2.17s    172:\t\t\tmethodName := tracingCodec.GetMethodName(request)\n</code></pre>\n<p><strong>优化思路：</strong></p>\n<p>因为在 GetMetas 里面已经解析过一次了，可以把解析过的 headers 传进去，如果 headers 有了就不用再去解析了，并且重构接口名称为一个，返回值为二元组，消除一次调用。</p>\n<h4>6. 优化 streamID 类型转换</h4>\n<p>在 go 中将 byte 数组和 streamID 进行互转的时候，比较费性能。</p>\n<p><strong>优化思路：</strong></p>\n<p>生产代码中, 尽量不要使用 fmt.Sprintf 和 fmt.Printf 去做类型转换和打印信息。可以使用 strconv 去转换。</p>\n<pre><code>   .      430ms    147: reqIDStr := fmt.Sprintf(&quot;%d&quot;, reqID)\n60ms      4.10s    168: fmt.Printf(&quot;src=%s, len=%d, reqid:%v\\n&quot;, streamID, reqIDStrLen, reqIDStr)\n</code></pre>\n<h4>7. 优化昂贵的系统调用</h4>\n<p>mosn 在解码 dubbo 的请求时，会在 header 中塞一份远程 host 的地址，并且在 for 循环中获取 remote IP，系统调用开销比较高。</p>\n<p><strong>优化思路：</strong></p>\n<pre><code>     50ms      920ms    136:\t\theaders[strings.ToLower(protocol.MosnHeaderHostKey)] = conn.connection.RemoteAddr().String()\n</code></pre>\n<p>在获取远程地址时，尽可能在 streamConnection 中 cache 远程 IP 值，不要每次都去调用 RemoteAddr。</p>\n<h4>8. 优化 slice 和 map 触发扩容和 rehash</h4>\n<p>在 mosn 处理 dubbo 请求时，会根据接口、版本和分组去构建 dataID ，然后匹配 cluster , 会创建默认 slice 和 map 对象，经过性能诊断，导致不断 allocate slice 和 grow map 容量比较费性能。</p>\n<p><strong>优化思路：</strong></p>\n<p>使用 slice 和 map 时，尽可能预估容量大小，使用 make(type, capacity) 去指定初始大小。</p>\n<h4>9. 优化 trace 日志级别输出</h4>\n<p>mosn 中不少代码在处理逻辑时，会打很多 trace 级别的日志，并且会传递不少参数值。</p>\n<p><strong>优化思路：</strong></p>\n<p>调用 trace 输出前，尽量判断一下日志级别，如果有多个 trace 调用，尽可能把所有字符串写到 buf 中，然后把 buf 内容写到日志中，并且尽可能少的调用 trace 日志方法。</p>\n<h4>10. 优化 tracer、log 和 metrics</h4>\n<p>在大促期间，对机器的性能要求较高，经过性能诊断，tracer、mosn log 和 cloud metrics 写日志（ IO 操作）非常耗费性能。</p>\n<p><strong>优化思路：</strong></p>\n<p>通过配置中心下发配置或者增加大促开关，允许 API 调用这些 feature 的开关。</p>\n<pre><code>/api/v1/downgrade/on\n/api/v1/downgrade/off\n</code></pre>\n<h4>11. 优化 route header 解析</h4>\n<p>mosn 中在做路由前，需要做大量的 header 的 map 访问，比如 IDC、antvip 等逻辑判断，商业版或者开源 mosn 不需要这些逻辑，这些也会占用一些开销。</p>\n<p><strong>优化思路：</strong></p>\n<p>如果是云上逻辑，主站的逻辑都不走。</p>\n<h4>12. 优化 featuregate 调用</h4>\n<p>在 mosn 中处理请求时，为了区分主站和商业版路由逻辑，会通过 featuregate 判断逻辑走哪部分。通过 featuregate 调用开销较大，需要频繁的做类型转换和多层 map 去获取。</p>\n<p><strong>优化思路：</strong></p>\n<p>通过一个 bool 变量记录 featuregate 对应开关，如果没有初始化过，就主动调用一下 featuregate。</p>\n<h3>未来性能优化思考</h3>\n<p>经过几轮性能优化 ，目前看火焰图，卡点都在 connection 的 read 和 write ，可以优化的空间比较小了。但是可能从以下场景中获得收益：</p>\n<ul>\n<li>减少 connection 的 read 和 write 次数 (syscall) 。</li>\n<li>优化 IO 线程模型，减少携程和上下文切换等。</li>\n</ul>\n<p>作为结束，给出了最终优化后的火焰图 ，大部分卡点都在系统调用和网络读写, 请参考图 1-4。</p>\n<p><img src=\"../../pic/hessian2/mosn-performance-optimization-4.png\" alt=\"mosn优化后火焰图\"></p>\n<center>图 1-4 优化版本 mosn + dubbo 火线图</center>\n<h3>其他</h3>\n<p>pprof 工具异常强大，可以诊断 CPU、memory、go 协程、tracer 和死锁等，该工具可以参考 <a href=\"https://blog.golang.org/pprof\">godoc</a>，性能优化参考：</p>\n<ul>\n<li>\n<p><a href=\"https://blog.golang.org/pprof\">https://blog.golang.org/pprof</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/Dr-wei/p/11742414.html\">https://www.cnblogs.com/Dr-wei/p/11742414.html</a></p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/watch?v=N3PWzBeLX2M\">https://www.youtube.com/watch?v=N3PWzBeLX2M</a></p>\n</li>\n</ul>\n<h3>关于作者</h3>\n<p>诣极，github ID zonghaishang，Apache Dubbo PMC，目前就职于蚂蚁金服中间件团队，主攻 RPC 和 Service Mesh 方向。 《深入理解 Apache Dubbo 与实战》一书作者。</p>\n",
  "link": "/zh-cn/docs/md/hessian2/mosn-performance-optimization.html",
  "meta": {
    "title": "记一次在 mosn 对 dubbo、dubbo-go-hessian2 的性能优化",
    "keywords": "mosn dubbo dubbo-go-hessian2 性能优化",
    "description": "在 mosn 对 dubbo、dubbo-go-hessian2 的性能优化过程分析记录和整理"
  }
}