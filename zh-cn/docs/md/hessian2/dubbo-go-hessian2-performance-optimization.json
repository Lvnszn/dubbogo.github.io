{
  "filename": "dubbo-go-hessian2-performance-optimization.md",
  "__html": "<h1>记一次对 dubbo-go-hessian2 的性能优化</h1>\n<p>2020 年 05 月 02 日</p>\n<p>目录</p>\n<p><a href=\"https://github.com/apache/dubbo-go-hessian2\">dubbo-go-hessian2</a> 是一个用 Go 实现的 hessian 协议 v2.0 版本的序列化库。从项目名称里可以看到主要用在 <a href=\"http://github.com/apache/dubbo-go\">dubbo-go</a> 这个项目里。hessian 协议作为 dubbo 的默认协议，因此对性能有比较高的要求。</p>\n<h2>立项</h2>\n<p>譬如有网文 <a href=\"https://my.oschina.net/u/4231722/blog/3168223\">基于 Go 的马蜂窝旅游网分布式 IM 系统技术实践</a> 把 dubbo-go 与其他 RPC 框架对比如下：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-a.png\" alt=\"\"></p>\n<p>有鉴于此，社区便开始组织部分人力，启动了对 dubbo-go 性能优化【同时也欢迎上文作者到钉钉群 23331795 与我们社区交流】。考察 dubbo-go 的各个组件，大家不约而同地决定首先优化比较独立的 <a href=\"https://github.com/apache/dubbo-go-hessian2\">dubbo-go-hessian2</a>。</p>\n<h2>起步</h2>\n<p>在最开始的时候，并没有太想清楚需要做什么，改哪个地方，要优化到何种程度，所以最简单的办法就是看看现状。</p>\n<p>首先，写了一个简单的例子，把常见的类型到一个结构体里，然后测一下耗时。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> Mix <span class=\"hljs-keyword\">struct</span> {\n    A  <span class=\"hljs-keyword\">int</span>\n    B  <span class=\"hljs-keyword\">string</span>\n    CA time.Time\n    CB <span class=\"hljs-keyword\">int64</span>\n    CC <span class=\"hljs-keyword\">string</span>\n    CD []<span class=\"hljs-keyword\">float64</span>\n    D  <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">interface</span>{}\n}\n\nm := Mix{A: <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-string\">'a'</span>), B: <span class=\"hljs-string\">`hello`</span>}\nm.CD = []<span class=\"hljs-keyword\">float64</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}\n<span class=\"hljs-comment\">// 再加一层，使得数据显得复杂一些</span>\nm.D = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">interface</span>{}{<span class=\"hljs-string\">`floats`</span>: m.CD, <span class=\"hljs-string\">`A`</span>: m.A, <span class=\"hljs-string\">`m`</span>: m}\n</code></pre>\n<blockquote>\n<p>看起来这个结构体跟真实环境里可能不太一样，但是用来分析瓶颈应该是足够了。</p>\n</blockquote>\n<p>然后直接靠 Go Test 写个测试用例：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BenchmarkEncode</span><span class=\"hljs-params\">(b *testing.B)</span></span> {\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; b.N; i++ {\n        _, _ = encodeTarget(&amp;m)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BenchmarkDecode</span><span class=\"hljs-params\">(b *testing.B)</span></span> {\n    <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; b.N; i++ {\n        _, _ = NewDecoder(bytes).Decode()\n    }\n}\n</code></pre>\n<blockquote>\n<p>go test -benchmem -run=^$ <a href=\"http://github.com/apache/dubbo-go-hessian2\">github.com/apache/dubbo-go-hessian2</a> -bench &quot;^B&quot; -vet=off -v</p>\n</blockquote>\n<p>得到下面结果：</p>\n<pre><code class=\"language-plain\">BenchmarkEncode-8 89461 11485 ns/op 3168 B/op 122 allocs/op\nBenchmarkDecode-8 64914 19595 ns/op 7448 B/op 224 allocs/op\n</code></pre>\n<p><strong><em>注：基于 MacBook Pro 2018【主频 Intel Core i7 2.6 GHz】测试。</em></strong></p>\n<p>不与同类库作横向比较，仅仅从这个测试结果里的数字上无法得出任何结论。对我们来说更重要的是：它到底慢在哪里。首先想到的手段便是：借助 pprof 生成火焰图，定位 CPU 消耗。</p>\n<p>pprof 工具的用法可以参考官网文档。本文测试时直接使用了 Goland 内置 <code>CPU Profiler</code> 的测试工具：测试函数左边的 <code>Run xx with 'CPU Profiler'</code>。</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-b.png\" alt=\"\"></p>\n<p>测试跑完后， Goland 直接显示火焰图如下：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-c.png\" alt=\"\"></p>\n<p>从这个图里可以看到，测试代码大概占用了左边的 70%，右边 30% 是运行时的一些消耗，运行时部分一般包括 gc、schedule 两大块，一般不能直接优化。图上左边可以清晰地看到 <code>encObject</code> 里 <code>RegisterPOJO</code> 和 <code>Encode</code> 各占了小一半。</p>\n<p>完成序列化功能的 <code>Encode</code> 消耗 CPU 如此之多尚可理解，而直觉上，把类对象进行解析和注册 <code>RegisterPOJO</code> 是不应该成为消耗大户的。所以猜测这个地方要么注册有问题，要么有重复注册。</p>\n<p>下一步分析，用了一个简单的办法：在这个函数里加日志。然后继续再跑一下 benchmark，可以看到性能瓶颈处：容器读写的地方。</p>\n<p>既然知道这里做了许多重复的无用功，就很容易明确优化方法：加缓存。把已经解析过的结果缓存下来，下次需要的时候直接取出使用。改进后的代码简单如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">if</span> goName, ok := pojoRegistry.j2g[o.JavaClassName()]; ok {\n    <span class=\"hljs-keyword\">return</span> pojoRegistry.registry[goName].index\n}\n</code></pre>\n<p>这里刚开始有个疑问，为什么要分两步先取 <code>JavaClassName</code> 再取 <code>GoName</code> 而不直接取后者？看起来好像是多此一举了，但其实 <code>JavaClassName</code> 是类直接定义的，而 <code>GoName</code> 却依赖一次反射。相较之下两次转换的消耗可以忽略了。改完之后再跑一下 benchmark：</p>\n<pre><code class=\"language-plain\">BenchmarkEncode-8 197593   5601 ns/op   1771 B/op   51 allocs/op\n</code></pre>\n<p>非常惊讶地看到，吞吐量大概是原来的 200%。与上面的火焰图对比，可以粗略的计算，<code>RegiserPOJO</code> 大概占了整体的 30%，改进后应该也只有原来的 <code>1 / 0.7 * 100% = 140%</code> 才对。答案也可以在火焰图里找到：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-d.png\" alt=\"\"></p>\n<p>除了 <code>RegisterPOJO</code> 被干掉以外，与上图对比，还有哪些区别呢？可以看到，原来占用将近 20% 的 <code>GC</code> 也几乎看不到了。所以真实的 CPU 利用率也要加上这部分的增长，大约 <code>1 / 0.5 * 100% = 200%</code>。</p>\n<blockquote>\n<p>需要提醒的是，benchmark 跑出来的结果并不算稳定，所以你自己压出来的结果跟我的可能不太一致，甚至多跑几次的结果也不完全一样。对于上面的数字你只要理解原因就好，上下浮动 10% 也都是正常范围。 反过来看，这也算是 GC 优化的一个角度。碰到 GC 占用 CPU 过高，除了去一个个换对象池，也可以重点看看那些被频繁调用的模块。当然更科学的方法是看 <code>pprof heap</code> / <code>memory profiler</code> 。</p>\n</blockquote>\n<p>针对这个结果，可以看到 <code>encObject</code> 以上都被切割成了不同的小格子，不再有像 <code>RegisterPOJO</code> 那样的大块占用，一般情况下，优化到这里就可以了。</p>\n<p>看完了 <code>Encode</code> ，再来看看 <code>Decode</code> ，方法类似，直接看 Goland 生成的火焰图：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-e.png\" alt=\"\"></p>\n<p>这个图有点迷惑性，好像也被分成差不多的小格子了。可以点开 <code>decObject</code> 这一层：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-f.png\" alt=\"\"></p>\n<p>这个时候原来小的 <code>...</code> 会显示具体内容，需要注意的是里面有两个 <code>findField</code> ，在复杂的调用里经常会遇到这种情况：一个耗资源的函数被分到了许多函数里，导致在看火焰图时并不能直观地看到它就是瓶颈。比较常见的有序列化、日志、网络请求等每个模块都会干一点却又没有一个全局的函数只干他一件事。这个时候除了肉眼去找以外也可以借助于另外一个工具：</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-g.png\" alt=\"\"></p>\n<p>在这个 <code>Method List</code> 里可以明显看到 <code>findField</code> 已经被合并到一起了，总占用接近 CPU 的一半，看到这里你大概就知道它应该是个优化点了。</p>\n<h2>进一步</h2>\n<p>函数 <code>func findField(name string, typ reflect.Type) ([]int, error)</code> 的作用是在一个类型里寻找指定属性的位置（Index，反射包里用它来表示是第几个字段）。很容易想到，对于一个结构体来说，每个字段的位置从一开始就确定了，所以用缓存一样可以解决这个问题。一个简单的优化如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">findField</span><span class=\"hljs-params\">(name <span class=\"hljs-keyword\">string</span>, typ reflect.Type)</span> <span class=\"hljs-params\">(indexes []<span class=\"hljs-keyword\">int</span>, err error)</span></span> {\n    typCache, _ := _findFieldCache.LoadOrStore(typ, &amp;sync.Map{})\n    indexes, _ := typCache.(*sync.Map).Load(name)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(indexes.([]<span class=\"hljs-keyword\">int</span>)) == <span class=\"hljs-number\">0</span> {\n        err = perrors.Errorf(<span class=\"hljs-string\">\"failed to find field %s\"</span>, name)\n    }\n\n    <span class=\"hljs-keyword\">return</span> indexes.([]<span class=\"hljs-keyword\">int</span>), err\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"language-plain\">- BenchmarkDecode-8 57723   17987 ns/op 7448 B/op   224 allocs/op\n+ BenchmarkDecode-8 82995   12272 ns/op 7224 B/op   126 allocs/op\n</code></pre>\n<p>可以看到，结果并不如预期的那样提升一倍效果。这个代码乍看起来，好像除了有一些啰嗦的断言，好像也没别的东西了，为什么只有 60% 的提升呢，我们还是借助下工具</p>\n<p><img src=\"../../pic/hessian2/dubbo-go-hessian2-performance-optimization-h.png\" alt=\"\"></p>\n<p>可以看到：读缓存耗费了 7% 的资源。其中，<code>sync.(*Map)</code> 不便优化，但 <code>newobejct</code> 是哪里来的呢？代码里可以看到，唯一定义新对象的地方就是函数第一行的 <code>&amp;sync.Map</code> ，我抱着试一试的心态把 <code>LoadOrStore</code> 拆成了两步</p>\n<pre><code class=\"language-go\">typCache, ok := _findFieldCache.Load(typ)\n<span class=\"hljs-keyword\">if</span> !ok {\n    typCache = &amp;sync.Map{}\n    _findFieldCache.Store(typ, typCache)\n}\n</code></pre>\n<pre><code class=\"language-plain\">- BenchmarkDecode-8        82995         12272 ns/op        7224 B/op        126 allocs/op\n+BenchmarkDecode-8        103876         12385 ns/op        6568 B/op        112 allocs/op\n</code></pre>\n<p>看结果，着实出乎意料。想起来以前看 Java 代码时经常碰到这样的代码：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">if</span> ( logLevel == <span class=\"hljs-string\">`info`</span> ) {\n    log.Info(...)\n}\n</code></pre>\n<p>以前一直觉得这个 <code>if</code> 真是浪费感情，现在想来，别是一番认知了。如果能提供一个 <code>LoadOrStore(key, func() interface{})</code> 的方法， 会不会更好一些？ 到这里的话，我们做了两个比较大的优化，整体性能大约提升了一倍。如果仔细看火焰图，还会发现有很多小的优化点，但是由于没有什么特别质的飞跃，这里不再赘述。有兴趣的小伙伴可以到 <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/179\">PR Imp: cache in reflection</a> 里阅读相关的讨论。</p>\n<h2>更进一步</h2>\n<p>优化到此，依然藏着一个更深层次的问题：找一个可靠的参考基准，以衡量目前的工作结果【毕竟没有对比就没有伤害】。一个很容易想到的比较对象是 Go 语言官方的 <code>json</code> 标准库。</p>\n<p>把 <a href=\"https://github.com/apache/dubbo-go-hessian2\">dubbo-go-hessian2</a> 与 <code>json</code> 标准库做比较如下：</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> go <span class=\"hljs-built_in\">test</span> -benchmem -run=^$ github.com/apache/dubbo-go-hessian2 -bench <span class=\"hljs-string\">\"^B\"</span> -vet=off -v -count=5</span>\ngoos: darwin\ngoarch: amd64\npkg: github.com/apache/dubbo-go-hessian2\nBenchmarkJsonEncode\nBenchmarkJsonEncode-8  249114   4719 ns/op  832 B/op  15 allocs/op\nBenchmarkJsonEncode-8  252224   4862 ns/op  832 B/op  15 allocs/op\nBenchmarkJsonEncode-8  240582   4739 ns/op  832 B/op  15 allocs/op\nBenchmarkJsonEncode-8  213283   4784 ns/op  832 B/op  15 allocs/op\nBenchmarkJsonEncode-8  227101   4665 ns/op  832 B/op  15 allocs/op\nBenchmarkEncode\nBenchmarkEncode-8  182184   5615 ns/op  1771 B/op  51 allocs/op\nBenchmarkEncode-8  183007   5565 ns/op  1771 B/op  51 allocs/op\nBenchmarkEncode-8  218664   5593 ns/op  1771 B/op  51 allocs/op\nBenchmarkEncode-8  214704   5886 ns/op  1770 B/op  51 allocs/op\nBenchmarkEncode-8  181861   5605 ns/op  1770 B/op  51 allocs/op\nBenchmarkJsonDecode\nBenchmarkJsonDecode-8 123667    8412 ns/op  1776 B/op  51 allocs/op\nBenchmarkJsonDecode-8 122796    8497 ns/op  1776 B/op  51 allocs/op\nBenchmarkJsonDecode-8 132103    8471 ns/op  1776 B/op  51 allocs/op\nBenchmarkJsonDecode-8 130687    8492 ns/op  1776 B/op  51 allocs/op\nBenchmarkJsonDecode-8 127668    8476 ns/op  1776 B/op  51 allocs/op\nBenchmarkDecode\nBenchmarkDecode-8 107775    10092 ns/op  6424 B/op  98 allocs/op\nBenchmarkDecode-8 110996    9950 ns/op   6424 B/op  98 allocs/op\nBenchmarkDecode-8 111036    10760 ns/op  6424 B/op  98 allocs/op\nBenchmarkDecode-8 113151    10063 ns/op  6424 B/op  98 allocs/op\nBenchmarkDecode-8 109197    10002 ns/op  6424 B/op  98 allocs/op\nPASS\nok      github.com/apache/dubbo-go-hessian2 28.680s\n</code></pre>\n<p>虽然每次的结果不稳定，但就整体而言，目前的序列化和反序列化性能大概都是 JSON 标准库的 85% 左右。这个成绩并不能说好，但短期内能花 20 分的精力得到一个 80 分的结果，应该也是可以接受的。至于剩下的 20%，就不是靠改几行代码就能搞定了。内存分配是否合理、执行流程是否有冗余，都是需要一点一滴地去改进。</p>\n<h2>总结</h2>\n<p>最后，我们来总结一下本文主要的优化步骤：</p>\n<ul>\n<li>利用火焰图 快速定位消耗 CPU 较高的模块；</li>\n<li>利用缓存机制，快速消除重复的计算；</li>\n<li>利用 CallTree、MethodList 等多种工具分析小段代码的精确消耗；</li>\n<li>遵循二八定律，以最小的成本做出一个效果显著的收益。</li>\n</ul>\n<h3>欢迎加入 dubbo-go 社区</h3>\n<p>目前 dubbo-go 已经到了一个比较稳定成熟的状态。在接下来的版本里面，我们将集中精力在云原生上。下一个版本，我们将首先实现应用维度的服务注册，这是一个和现有注册模型完全不同的新的注册模型。也是我们朝着云原生努力的一个关键版本。</p>\n<p>dubbo-go 钉钉群 <strong>23331795</strong> 欢迎你的加入。</p>\n<h2>作者信息</h2>\n<p>张慧仁，github id micln，任职 得到 APP 后端开发。</p>\n",
  "link": "/zh-cn/docs/md/hessian2/dubbo-go-hessian2-performance-optimization.html",
  "meta": {
    "title": "记一次对 dubbo-go-hessian2 的性能优化",
    "keywords": "dubbo-go-hessian2 性能优化",
    "description": "对 dubbo-go-hessian2 的性能优化的过程复盘记录"
  }
}