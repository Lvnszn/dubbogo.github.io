{
  "filename": "what's-new-in-dubbo-go-hessian2-v1.7.0.md",
  "__html": "<h1><a href=\"https://www.oschina.net/news/118648/dubbogo-hessian2-1-7-0-released\">Dubbo-go-hessian2 v1.7.0 发布</a></h1>\n<p>Dubbo-go-hessian2 v1.7.0已发布，详见 <a href=\"https://github.com/apache/dubbo-go-hessian2/releases/tag/v1.7.0%EF%BC%8C\">https://github.com/apache/dubbo-go-hessian2/releases/tag/v1.7.0，</a> 以下对这次更新内容进行详细整理。</p>\n<p>另外v1.6.3 将 attachment 类型由 map[string]stiring 改为map[string]interface{} 导致版本不兼容问题，这部分已还原，后续的计划是将dubbo协议的request/response对象整体迁移到dubbogo项目中进行迭代修改， hessian2中将不再改动到request/response对象。</p>\n<h2>1. New Features</h2>\n<h3>1.1 add GetStackTrace method into Throwabler and its implements. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/207\">#207</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/cvictory\">https://github.com/cvictory</a></p>\n</blockquote>\n<p>go语言client请求java语言服务时，如果java语言抛出了异常，异常对应的堆栈信息是被保存在StackTraceElement中。</p>\n<p>这个异常信息在日志中最好能被打印出来，以方便客户端排查问题，所以在Throwabler和对应子类中增加了StackTraceElement的获取。</p>\n<p>注：其实还有一种更好的方法，所有的具体的异常类型都包含java_exception/exception.go的Throwable struct。这样只需要在Throwable中增加GetStackTrace方法就可以了。但是这种方式需要更多的测试验证，改动的逻辑相对会复杂一些。但是代码会更整洁。 这里先不用这种方法。</p>\n<h3>1.2 catch user defined exceptions. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/208\">#208</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/cvictory\">https://github.com/cvictory</a></p>\n</blockquote>\n<p>golang中增加一个java中Exception对象的序列化输出方法：</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">JavaException</span>() <span class=\"hljs-selector-attr\">[]</span><span class=\"hljs-selector-tag\">byte</span> {\n\t<span class=\"hljs-attribute\">e </span>:= hessian.<span class=\"hljs-built_in\">NewEncoder</span>()\n\texception := java_exception.<span class=\"hljs-built_in\">NewException</span>(<span class=\"hljs-string\">\"java_exception\"</span>)\n\te.<span class=\"hljs-built_in\">Encode</span>(exception)\n\treturn e.<span class=\"hljs-built_in\">Buffer</span>()\n}\n</code></pre>\n<p>在output/output.go 提供调用入口:添加如下函数初始化声明</p>\n<pre><code class=\"language-plain\">func init() {\n    funcMap[&quot;JavaException&quot;] = testfuncs.JavaException\n}\n</code></pre>\n<p>java代码中增加调用go方法序列化结果: <strong>说明</strong>: Assert.assertEquals 不能直接比较Exception对象是否相等</p>\n<pre><code class=\"language-php\">    <span class=\"hljs-comment\">/**\n     * test java java.lang.Exception object and go java_exception Exception struct\n     */</span>\n    @Test\n    <span class=\"hljs-keyword\">public</span> void testException() {\n        <span class=\"hljs-keyword\">Exception</span> <span class=\"hljs-keyword\">exception</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Exception</span>(<span class=\"hljs-string\">\"java_exception\"</span>);\n        Object javaException = GoTestUtil.readGoObject(<span class=\"hljs-string\">\"JavaException\"</span>);\n        <span class=\"hljs-keyword\">if</span> (javaException <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-keyword\">Exception</span>) {\n            Assert.assertEquals(<span class=\"hljs-keyword\">exception</span>.getMessage(), ((<span class=\"hljs-keyword\">Exception</span>) javaException).getMessage());\n        }\n    }\n</code></pre>\n<h3>1.3 support java8 time object. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/212\">#212</a>, <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/221\">#221</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/willson-chen\">https://github.com/willson-chen</a>, <a href=\"https://github.com/cyb-code\">https://github.com/cyb-code</a></p>\n</blockquote>\n<p>golang中增加一个java8对象的序列化输出方法：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// test java8 java.time.Year</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Java8TimeYear</span><span class=\"hljs-params\">()</span> []<span class=\"hljs-title\">byte</span></span> {\n    e := hessian.NewEncoder()\n    year := java8_time.Year{Year: <span class=\"hljs-number\">2020</span>}\n    e.Encode(year)\n    <span class=\"hljs-keyword\">return</span> e.Buffer()\n}\n\n<span class=\"hljs-comment\">// test java8 java.time.LocalDate</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Java8LocalDate</span><span class=\"hljs-params\">()</span> []<span class=\"hljs-title\">byte</span></span> {\n    e := hessian.NewEncoder()\n    date := java8_time.LocalDate{Year: <span class=\"hljs-number\">2020</span>, Month: <span class=\"hljs-number\">9</span>, Day: <span class=\"hljs-number\">12</span>}\n    e.Encode(date)\n    <span class=\"hljs-keyword\">return</span> e.Buffer()\n}\n</code></pre>\n<p>在output/output.go 提供调用入口:添加函数初始化声明</p>\n<pre><code class=\"language-plain\">func init() {\n\tfuncMap[&quot;Java8TimeYear&quot;] = testfuncs.Java8TimeYear\n\tfuncMap[&quot;Java8LocalDate&quot;] = testfuncs.Java8LocalDate\n}\n</code></pre>\n<p>java代码中增加调用go方法序列化结果:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * test java8 java.time.* object and go java8_time/* struct\n */</span>\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testJava8Year</span><span class=\"hljs-params\">()</span> </span>{\n    Year year = Year.of(<span class=\"hljs-number\">2020</span>);\n    Assert.assertEquals(year\n            , GoTestUtil.readGoObject(<span class=\"hljs-string\">\"Java8TimeYear\"</span>));\n    LocalDate localDate = LocalDate.of(<span class=\"hljs-number\">2020</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>);\n    Assert.assertEquals(localDate, GoTestUtil.readGoObject(<span class=\"hljs-string\">\"Java8LocalDate\"</span>));\n}\n</code></pre>\n<h3>1.4 support test golang encoding data in java. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/213\">#213</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/wongoo\">https://github.com/wongoo</a></p>\n</blockquote>\n<p>为了更好的测试验证hessian库，原来已经支持在golang中测试java的序列化数据，现在增加在java中测试golang的序列化数据，实现双向测试验证。</p>\n<p>golang中增加序列化输出方法:</p>\n<pre><code class=\"language-css\"><span class=\"hljs-selector-tag\">func</span> <span class=\"hljs-selector-tag\">HelloWorldString</span>() <span class=\"hljs-selector-attr\">[]</span><span class=\"hljs-selector-tag\">byte</span> {\n    <span class=\"hljs-attribute\">e </span>:= hessian.<span class=\"hljs-built_in\">NewEncoder</span>()\n    e.<span class=\"hljs-built_in\">Encode</span>(<span class=\"hljs-string\">\"hello world\"</span>)\n    return e.<span class=\"hljs-built_in\">Buffer</span>()\n}\n</code></pre>\n<p>将该方法注册到output/output.go中</p>\n<pre><code class=\"language-plain\"> // add all output func here\n func init() {\n     funcMap[&quot;HelloWorldString&quot;] = testfuncs.HelloWorldString\n}\n</code></pre>\n<p>output/output.go 提供调用入口:</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    flag.Parse()\n\n    <span class=\"hljs-keyword\">if</span> *funcName == <span class=\"hljs-string\">\"\"</span> {\n        _, _ = fmt.Fprintln(os.Stderr, <span class=\"hljs-string\">\"func name required\"</span>)\n        os.Exit(<span class=\"hljs-number\">1</span>)\n    }\n    f, exist := funcMap[*funcName]\n    <span class=\"hljs-keyword\">if</span> !exist {\n        _, _ = fmt.Fprintln(os.Stderr, <span class=\"hljs-string\">\"func name not exist: \"</span>, *funcName)\n        os.Exit(<span class=\"hljs-number\">1</span>)\n    }\n\n    <span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">if</span> err := <span class=\"hljs-built_in\">recover</span>(); err != <span class=\"hljs-literal\">nil</span> {\n            _, _ = fmt.Fprintln(os.Stderr, <span class=\"hljs-string\">\"error: \"</span>, err)\n            os.Exit(<span class=\"hljs-number\">1</span>)\n        }\n    }()\n    <span class=\"hljs-keyword\">if</span> _, err := os.Stdout.Write(f()); err != <span class=\"hljs-literal\">nil</span> {\n        _, _ = fmt.Fprintln(os.Stderr, <span class=\"hljs-string\">\"call error: \"</span>, err)\n        os.Exit(<span class=\"hljs-number\">1</span>)\n    }\n    os.Exit(<span class=\"hljs-number\">0</span>)\n}\n</code></pre>\n<p>java代码中增加调用go方法序列化结果:</p>\n<pre><code class=\"language-plain\">public class GoTestUtil {\n\n    public static Object readGoObject(String func) {\n        System.out.println(&quot;read go data: &quot; + func);\n        try {\n            Process process = Runtime.getRuntime()\n                    .exec(&quot;go run output/output.go -func_name=&quot; + func,\n                            null,\n                            new File(&quot;..&quot;));\n\n            int exitValue = process.waitFor();\n            if (exitValue != 0) {\n                Assert.fail(readString(process.getErrorStream()));\n                return null;\n            }\n\n            InputStream is = process.getInputStream();\n            Hessian2Input input = new Hessian2Input(is);\n            return input.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private static String readString(InputStream in) throws IOException {\n        StringBuilder out = new StringBuilder();\n        InputStreamReader reader = new InputStreamReader(in, StandardCharsets.UTF_8);\n        char[] buffer = new char[4096];\n\n        int bytesRead;\n        while ((bytesRead = reader.read(buffer)) != -1) {\n            out.append(buffer, 0, bytesRead);\n        }\n\n        return out.toString();\n    }\n}\n</code></pre>\n<p>增加java测试代码:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testHelloWordString</span><span class=\"hljs-params\">()</span> </span>{\n    Assert.assertEquals(<span class=\"hljs-string\">\"hello world\"</span>\n            , GoTestUtil.readGoObject(<span class=\"hljs-string\">\"HelloWorldString\"</span>));\n}\n</code></pre>\n<h3>1.5 support java.sql.Time &amp; java.sql.Date. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/219\">#219</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/zhangshen023\">https://github.com/zhangshen023</a></p>\n</blockquote>\n<p>增加了 java 类 java.sql.Time, java.sql.Date 支持，分别对应到hessian.Time 和 hessian.Date， 详见 <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/219/files%E3%80%82\">https://github.com/apache/dubbo-go-hessian2/pull/219/files。</a></p>\n<h2>2. Enhancement</h2>\n<h3>2.1 Export function EncNull. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/225\">#225</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/cvictory\">https://github.com/cvictory</a></p>\n</blockquote>\n<p>开放 hessian.EncNull 方法，以便用户特定情况下使用。</p>\n<h2>3. Bugfixes</h2>\n<h3>3.1 fix enum encode error in request. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/203\">#203</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/pantianying\">https://github.com/pantianying</a></p>\n</blockquote>\n<p>原来在 dubbo request 对象中没有判断 enum 类型的情况，此pr增加了判断是不是POJOEnum类型。详见 <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/203/files\">https://github.com/apache/dubbo-go-hessian2/pull/203/files</a></p>\n<h3>3.2 fix []byte field decoding issue. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/216\">#216</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/wongoo\">https://github.com/wongoo</a></p>\n</blockquote>\n<p>v1.7.0 之前如果 struct中包含[]byte字段时无法反序列化, 报错“error list tag: 0x29”，主要原因是被当做list进行处理，对于这种情况应该按照binary数据进行处理即可。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> Circular <span class=\"hljs-keyword\">struct</span> {\n    Num      <span class=\"hljs-keyword\">int</span>\n\tPrevious *Circular\n\tNext     *Circular\n\tResponseDataBytes    []<span class=\"hljs-keyword\">byte</span> <span class=\"hljs-comment\">// &lt;---- </span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Circular)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.company.Circular\"</span>\n}\n</code></pre>\n<h3>3.3 fix decoding error for map in map. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/229\">#229</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/wongoo\">https://github.com/wongoo</a></p>\n</blockquote>\n<p>v1.7.0 之前嵌套map无法正确解析，主要原因是对应的map对象被当做一个数据类型却未被自动加到类引用列表中，而嵌套map类信息是同一类型的引用，去类引用列表找，找不到就报错了。 解决这个问题的方法就是遇到map类对象，也将其加入到类引用列表中即可。 问题详细参考 <a href=\"https://github.com/apache/dubbo-go-hessian2/issues/119\">#119</a>.</p>\n<h3>3.4 fix fields name mismatch in Duration class. <a href=\"https://github.com/apache/dubbo-go-hessian2/pull/234\">#234</a></h3>\n<blockquote>\n<p>contributed by <a href=\"https://github.com/skyao\">https://github.com/skyao</a></p>\n</blockquote>\n<p>这个 PR 解决了Duration对象中字段错误定义，原来是&quot;second/nano&quot;， 应该是&quot;seconds/nanos&quot;。</p>\n<p>同时改善了测试验证数据。之前使用0作为int字段的测试数据，这是不准确的，因为int类型默认值就是0.</p>\n",
  "link": "/zh-cn/docs/md/hessian2/what's-new-in-dubbo-go-hessian2-v1.7.0.html",
  "meta": {
    "title": "Dubbo-go-hessian2 v1.7.0 发布",
    "keywords": "Dubbo-go-hessian2 v1.7.0",
    "description": "介绍 dubbo-go-hessian2的v1.7.0版本新功能"
  }
}