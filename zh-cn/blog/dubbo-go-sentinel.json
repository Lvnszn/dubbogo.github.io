{
  "filename": "dubbo-go-sentinel.md",
  "__html": "<h1>在dubbo-go中使用sentinel</h1>\n<p>时至今日，Apache/dubbo-go（以下简称 dubbo-go ）项目在功能上已经逐步对齐java版本，稳定性也在不同的生产环境得到了验证。社区便开始再服务治理、监控等方向发力。随着 1.2和1.3 版本发布， dubbo-go 新增了大量此类新feature。</p>\n<p>今天我们聊一聊限流相关话题，此前dubbo-go已经支持了<a href=\"https://github.com/apache/dubbo-go/pull/237\">tps limit</a>、<a href=\"https://github.com/apache/dubbo-go/pull/246\">execute limit </a>、<a href=\"https://github.com/apache/dubbo-go/pull/133\">hystrix</a>   的内置filter，用户只要简单配置就能马上用上。但我们知道，在 java 的 dubbo 生态中，有一项限流工具被广泛使用，那就是sentinel。sentinel因为强大的动态规划配置、优秀的dashboard以及对dubbo的良好适配，成为众多使用dubbo的企业选用限流工具的不二之选。</p>\n<p>就在前些日子，社区非常高兴得知 Sentinel Golang 首个版本 0.1.0 正式发布，这使得 dubbo-go也可以使用 sentinel 作为工具进行一些服务治理、监控的工作了。随着sentinel golang的健壮，我们相信用户马上可以像sentinel管理java dubbo服务那样管理dubbo-go的服务了。</p>\n<p>完成sentinel golang的dubbo-adapter其实非常简单，这得益于dubbo-go早就完成了filter链的构造，用户可以自定义filter，并且灵活的安排其执行顺序。在1.3发布后，增加了filter中的context传递，构建sentinel/adapter/dubbo更为方便。</p>\n<p>我们以其中的provider filter适配为例:</p>\n<p><a href=\"../../img/blog/dubbogo-sentinel.resources/dubbo-go-sentinel-provider-filter.png\"><img src=\"../../img/blog/dubbogo-sentinel.resources/dubbo-go-sentinel-provider-filter.png\" alt=\"SentinelProviderFilter\"></a></p>\n<p>此 filter 实现了 dubbo-go的filter接口，只要用户在服务启动时将此filter加载到dubbo-go中，即可使用此filter。\n<a href=\"../../img/blog/dubbogo-sentinel.resources/sentinel-golang.png\"><img src=\"../../img/blog/dubbogo-sentinel.resources/sentinel-golang.png\" alt=\"Sentinel-design\"></a></p>\n<p>sentinel实现原理与其他限流、熔断库大同小异，底层是用的滑动窗口算法。与hystrix等框架相比不同点是设计理念，Sentinel 的设计理念是让您自由选择控制的角度，并进行灵活组合，从而达到想要的效果。</p>\n<p>下面我整理了完整的使用流程：(注意：dubbo-go版本请使用1.3.0-rc3及其以上版本)</p>\n<p>在dubbo-go中使用sentinel主要分为以下几步：</p>\n<p>1.初始化sentinel</p>\n<p>2.将sentinel注入dubbo-go的filter</p>\n<p>3.初始化dubbo-go</p>\n<p>4.配置规划</p>\n<h2>初始化sentinel</h2>\n<p>示例代码：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\tsentinel <span class=\"hljs-string\">\"github.com/alibaba/sentinel-golang/api\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initSentinel</span><span class=\"hljs-params\">()</span></span> {\n\terr := sentinel.InitWithLogDir(confPath, logDir)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-comment\">// 初始化 Sentinel 失败</span>\n\t}\n}\n</code></pre>\n<h2>将sentinel注入dubbo-go的filter</h2>\n<p>你可以通过import包的形式执行，执行其中的init()来注入filter</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\t_ <span class=\"hljs-string\">\"github.com/alibaba/sentinel-golang/adapter/dubbo\"</span>\n)\n\n</code></pre>\n<p>也可以手动执行，给你的filter取上自己想要的名字</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n  <span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/extension\"</span>\n  sd <span class=\"hljs-string\">\"github.com/alibaba/sentinel-golang/adapter/dubbo\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n  extension.SetFilter(<span class=\"hljs-string\">\"myConsumerFilter\"</span>,sd.GetConsumerFilter())\n  extension.SetFilter(<span class=\"hljs-string\">\"myProviderFilter\"</span>,sd.GetConsumerFilter())\n}\n</code></pre>\n<p>完成以上步骤，你就可以在需要的dubbo接口配置里写入sentinel的filterName,构建起接口的filter链条。比如以下以consumer.yml配置文件为例</p>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">references:</span>\n  <span class=\"hljs-attr\">\"UserProvider\":</span>\n    <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"hangzhouzk\"</span>\n    <span class=\"hljs-attr\">protocol :</span> <span class=\"hljs-string\">\"dubbo\"</span>\n    <span class=\"hljs-attr\">interface :</span> <span class=\"hljs-string\">\"com.ikurento.user.UserProvider\"</span>\n    <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">\"failover\"</span>\n    <span class=\"hljs-attr\">filter:</span> <span class=\"hljs-string\">\"myConsumerFilter\"</span>\n    <span class=\"hljs-attr\">methods :</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"GetUser\"</span>\n      <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<h2>初始化dubbo-go</h2>\n<p>到这一步，你只需要正常启动dubbo-go程序就完成了服务启动。用以下代码做一个较为完整举例</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\thessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n\tsd <span class=\"hljs-string\">\"github.com/alibaba/sentinel-golang/adapter/dubbo\"</span>\n)\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/logger\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/proxy/proxy_factory\"</span>\n\t<span class=\"hljs-string\">\"github.com/apache/dubbo-go/config\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/filter/impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/protocol/dubbo\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/protocol\"</span>\n\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/cluster_impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/loadbalance\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/zookeeper\"</span>\n\t<span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/extension\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\n\thessian.RegisterPOJO(&amp;User{})\n  extension.SetFilter(<span class=\"hljs-string\">\"myConsumerFilter\"</span>,sd.GetConsumerFilter())\n  extension.SetFilter(<span class=\"hljs-string\">\"myProviderFilter\"</span>,sd.GetConsumerFilter())\n\tconfig.Load()\n\n\t<span class=\"hljs-comment\">// init finish, do your work</span>\n\ttest()\n}\n</code></pre>\n<h2>规划配置</h2>\n<p>sentinel以强大的规划配置吸引了很多使用者，其提供动态数据源接口进行扩展，用户可以通过动态文件或 etcd 等配置中心来动态地配置规则。但目前sentinel-golang作为破蛋版本，动态配置还在开发中</p>\n<h3>动态数据源</h3>\n<p>（开发中）Sentinel 提供动态数据源接口进行扩展，用户可以通过动态文件或 etcd 等配置中心来动态地配置规则。</p>\n<h3>硬编码方式</h3>\n<p>Sentinel 也支持原始的硬编码方式加载规则，可以通过各个模块的 <code>LoadRules(rules)</code> 方法加载规则。以下是硬编码方式对某个method在consumer端的QPS流控：</p>\n<pre><code class=\"language-go\">_, err := flow.LoadRules([]*flow.FlowRule{\n\t{\n\t\tID:                <span class=\"hljs-number\">666</span>,\n\t\tResource:         <span class=\"hljs-string\">\"dubbo:consumer:com.ikurento.user.UserProvider:myGroup:1.0.0:hello()\"</span>,\n\t\tMetricType:        flow.QPS,\n\t\tCount:             <span class=\"hljs-number\">10</span>,\n\t\tControlBehavior:   flow.Reject,\n\t},\n})\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t<span class=\"hljs-comment\">// 加载规则失败，进行相关处理</span>\n}\n</code></pre>\n<h1>总结</h1>\n<p>更加具体的实现，我就不详细论述，大家可以去看源码进一步了解。</p>\n<p>最后，欢迎大家持续关注，或者贡献代码，期待dubbo-go在2020年在云原生领域继续突破。</p>\n<p>dubbo-go仓库地址：<a href=\"https://github.com/apache/dubbo-go\">https://github.com/apache/dubbo-go</a></p>\n",
  "link": "/zh-cn/blog/dubbo-go-sentinel.html",
  "meta": {
    "title": "在dubbo-go 中使用sentinel",
    "keywords": "\"dubbo-go\", \"sentinel-golang\",\"limit filter\"",
    "description": "如何在dubbo-go中使用sentinel"
  }
}