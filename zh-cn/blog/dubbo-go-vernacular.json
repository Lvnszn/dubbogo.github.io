{
  "filename": "dubbo-go-vernacular.md",
  "__html": "<h2>一、前言</h2>\n<blockquote>\n<p>本文基于 dubbogo <a href=\"https://github.com/apache/dubbo-go/releases/tag/v1.5.4\">1.5.4</a> 版本</p>\n</blockquote>\n<p>最近开始参与 dubbogo 的一些开发测试，之前都是直接拿 <a href=\"https://github.com/apache/dubbo-go-samples\">samples</a> 的例子验证功能，而这次为了复现一个功能问题，打算从零开始搭建一个 dubbo-go 和 dubbo 调用的工程，踩到了一些新人使用 dubbogo 的坑，把这个过程记录下供大家参考。</p>\n<p>通过本文你可以了解到：</p>\n<ul>\n<li>如何常规配置 dubbogo 消费方去调用 dubbo 和 dubbogo 服务提供方</li>\n<li>通过一个实际的 BUG 介绍解决问题的思路</li>\n</ul>\n<h2>二、解决问题</h2>\n<h3>2.1 准备 dubbo 服务提供者</h3>\n<h4>2.1.1 基本定义</h4>\n<p>定义 <code>DemoService</code> 接口：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DemoService</span> </span>{\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(String name)</span></span>;\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(User user)</span></span>;\n\n    <span class=\"hljs-function\">String <span class=\"hljs-title\">sayHello</span><span class=\"hljs-params\">(User user, String name)</span></span>;\n\n}\n</code></pre>\n<p>定义 <code>User</code> 对象：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;\n\n    ......\n}\n</code></pre>\n<h4>2.1.2 启动 dubbo 服务提供者</h4>\n<p>用的 <a href=\"http://dubbo.apache.org/zh/docs/v2.7/user/configuration/api/\">dubbo 官方示例代码</a>:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n    <span class=\"hljs-comment\">// 服务实现</span>\n    DemoService demoService = <span class=\"hljs-keyword\">new</span> DemoServiceImpl();\n\n    <span class=\"hljs-comment\">// 当前应用配置</span>\n    ApplicationConfig application = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n    application.setName(<span class=\"hljs-string\">\"demoProvider\"</span>);\n\n    <span class=\"hljs-comment\">// 连接注册中心配置</span>\n    RegistryConfig registry = <span class=\"hljs-keyword\">new</span> RegistryConfig();\n    registry.setAddress(<span class=\"hljs-string\">\"127.0.0.1:2181\"</span>);\n    registry.setProtocol(<span class=\"hljs-string\">\"zookeeper\"</span>);\n    registry.setUsername(<span class=\"hljs-string\">\"\"</span>);\n    registry.setPassword(<span class=\"hljs-string\">\"\"</span>);\n\n    <span class=\"hljs-comment\">// 服务提供者协议配置</span>\n    ProtocolConfig protocol = <span class=\"hljs-keyword\">new</span> ProtocolConfig();\n    protocol.setName(<span class=\"hljs-string\">\"dubbo\"</span>);\n    protocol.setPort(<span class=\"hljs-number\">12345</span>);\n    protocol.setThreads(<span class=\"hljs-number\">200</span>);\n\n    <span class=\"hljs-comment\">// 注意：ServiceConfig为重对象，内部封装了与注册中心的连接，以及开启服务端口</span>\n\n    <span class=\"hljs-comment\">// 服务提供者暴露服务配置</span>\n    ServiceConfig&lt;DemoService&gt; service = <span class=\"hljs-keyword\">new</span> ServiceConfig&lt;&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\n    service.setApplication(application);\n    service.setRegistry(registry); <span class=\"hljs-comment\">// 多个注册中心可以用setRegistries()</span>\n    service.setProtocol(protocol); <span class=\"hljs-comment\">// 多个协议可以用setProtocols()</span>\n    service.setInterface(DemoService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    service.setRef(demoService);\n    service.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n    service.setGroup(<span class=\"hljs-string\">\"tc\"</span>);\n    service.setTimeout(<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>);\n\n    <span class=\"hljs-comment\">// 暴露及注册服务</span>\n    service.export();\n\n    System.in.read();\n}\n</code></pre>\n<p>查看 zookeeper 看是否注册成功：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-variable\">$ls</span> /dubbo/com.funnycode.DemoService/providers\n[dubbo%3A%2F%2F127.0.0.1%3A12345%2Fcom.funnycode.DemoService%3Fanyhost%3Dtrue%26application%3DdemoProvider%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26generic%3Dfalse%26group%3Dtc%26interface%3Dcom.funnycode.DemoService%26methods%3DsayHello%26pid%3D18167%26release%3D2.7.7%26revision%3D1.0.0%26side%3Dprovider%26threads%3D200%26timestamp%3D1606896020691%26version%3D1.0.0]\n</code></pre>\n<p>如上的输出表示服务提供方已经启动。</p>\n<h3>2.2 准备 dubbogo 服务消费者</h3>\n<h4>2.2.1 基本定义</h4>\n<p>定义 <code>User</code> 对象：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tName <span class=\"hljs-keyword\">string</span>\n\tAge  <span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.funnycode.User\"</span>\n}\n</code></pre>\n<p>定义 <code>DemoProvider</code> 接口：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> DemoProvider <span class=\"hljs-keyword\">struct</span> {\n\tSayHello  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span>            `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n\tSayHello2 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span>              `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n\tSayHello3 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user User, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span> `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"DemoProvider\"</span>\n}\n</code></pre>\n<h4>2.2.2 启动 dubbogo 消费者</h4>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.Load()\n\tgxlog.CInfo(<span class=\"hljs-string\">\"\\n\\n\\nstart to test dubbo\"</span>)\n\n\tres, err := demoProvider.SayHello(context.TODO(), <span class=\"hljs-string\">\"tc\"</span>)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tuser := User{\n\t\tName: <span class=\"hljs-string\">\"tc\"</span>,\n\t\tAge:  <span class=\"hljs-number\">18</span>,\n\t}\n\n\tres, err = demoProvider.SayHello2(context.TODO(), user)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tres, err = demoProvider.SayHello3(context.TODO(), user, <span class=\"hljs-string\">\"tc\"</span>)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tinitSignal()\n}\n</code></pre>\n<h3>2.3 请求结果分析</h3>\n<h4>2.3.1 直接调用</h4>\n<blockquote>\n<p>确认问题的存在</p>\n</blockquote>\n<p>第一个接口的参数是字符串，可以正常返回 <code>[2020-12-03/18:59:12 main.main: client.go: 29] response result: Hello tc</code>\n第二、三两个接口存在 <code>User</code> 对象，无法调用成功。错误信息如下：</p>\n<pre><code class=\"language-bash\">2020-12-02T17:10:47.739+0800    INFO    getty/listener.go:87    session{session session-closed, Read Bytes: 924, Write Bytes: 199, Read Pkgs: 0, Write Pkgs: 1} got error{java exception:Fail to decode request due to: java.lang.IllegalArgumentException: Service not found:com.funnycode.DemoService, sayHello\n        at org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation.decode(DecodeableRpcInvocation.java:134)\n        at org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation.decode(DecodeableRpcInvocation.java:80)\n        at org.apache.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:57)\n        at org.apache.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:44)\n        at org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:57)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)\n}, will be closed.\n</code></pre>\n<p>错误正如 <a href=\"https://github.com/apache/dubbo-go/issues/900\">issue</a> 中描述的一模一样，因为错误信息返回到了消费端，可以看到 Java 那边的错误堆栈信息，所以直接去看 <code>DecodeableRpcInvocation.decode#134</code>。</p>\n<h4>2.3.2 断点查看</h4>\n<p>代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 反序列化</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecodeableRpcInvocation</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RpcInvocation</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Codec</span>, <span class=\"hljs-title\">Decodeable</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">decode</span><span class=\"hljs-params\">(Channel channel, InputStream input)</span> <span class=\"hljs-keyword\">throws</span> IOException </span>{\n      ......\n      <span class=\"hljs-keyword\">if</span> (serviceDescriptor != <span class=\"hljs-keyword\">null</span>) {\n          <span class=\"hljs-comment\">// 方法描述里面根据方法名查找</span>\n          MethodDescriptor methodDescriptor = serviceDescriptor.getMethod(getMethodName(), desc);\n          <span class=\"hljs-keyword\">if</span> (methodDescriptor != <span class=\"hljs-keyword\">null</span>) {\n              pts = methodDescriptor.getParameterClasses();\n              <span class=\"hljs-keyword\">this</span>.setReturnTypes(methodDescriptor.getReturnTypes());\n          }\n      }\n      <span class=\"hljs-comment\">// 表示没有找到方法        </span>\n      <span class=\"hljs-keyword\">if</span> (pts == DubboCodec.EMPTY_CLASS_ARRAY) {\n          <span class=\"hljs-keyword\">if</span> (!RpcUtils.isGenericCall(path, getMethodName()) &amp;&amp; !RpcUtils.isEcho(path, getMethodName())) {\n              <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Service not found:\"</span> + path + <span class=\"hljs-string\">\", \"</span> + getMethodName());\n          }\n          pts = ReflectUtils.desc2classArray(desc);\n      }\n      ......\n    }\n}\n</code></pre>\n<ul>\n<li>查看 <code>MethodDescriptor</code>，即找方法是否存在，存在的话就会设置好 <code>ParameterClasses</code></li>\n<li>如果上面没找到，<code>pts == DubboCodec.EMPTY_CLASS_ARRAY</code> 就会满足条件，进而判断是否是泛化调用或者是 echo 调用，如果都不是则报服务找不到方法错误</li>\n<li>desc 是 <code>Ljava/lang/Object</code> ，很明显并没有参数是 Object 的方法，所以必然是会报错的</li>\n</ul>\n<p>补充说明：</p>\n<p><strong>方法查询</strong></p>\n<p>代码如下：</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MethodDescriptor <span class=\"hljs-title\">getMethod</span><span class=\"hljs-params\">(String methodName, String params)</span> </span>{\n    Map&lt;String, MethodDescriptor&gt; methods = descToMethods.get(methodName);\n    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isNotEmptyMap(methods)) {\n        <span class=\"hljs-keyword\">return</span> methods.get(params);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n}\n</code></pre>\n<p>优点：</p>\n<p>比之前的版本加了方法的元信息缓存起来，不使用反射可以提高效率，可以理解用空间换时间。</p>\n<p><img src=\"/imgs/blog/dubbo-go/from-scratch/dfsa01.jpg\" alt=\"dfsa01.jpg\"></p>\n<h3>2.4 解决问题</h3>\n<blockquote>\n<p>因为直接撸代码并 hold 不住，所以通过比较来查看问题所在。</p>\n</blockquote>\n<h4>2.4.1 启动 dubbo 服务消费者</h4>\n<p>通过 api 模式启动，参考官方例子。启动这个是为了查看 Java 版本的传输内容。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException </span>{\n    <span class=\"hljs-comment\">// 当前应用配置</span>\n    ApplicationConfig application = <span class=\"hljs-keyword\">new</span> ApplicationConfig();\n    application.setName(<span class=\"hljs-string\">\"demoProvider2\"</span>);\n\n    <span class=\"hljs-comment\">// 连接注册中心配置</span>\n    RegistryConfig registry = <span class=\"hljs-keyword\">new</span> RegistryConfig();\n    registry.setAddress(<span class=\"hljs-string\">\"127.0.0.1:2181\"</span>);\n    registry.setProtocol(<span class=\"hljs-string\">\"zookeeper\"</span>);\n    registry.setUsername(<span class=\"hljs-string\">\"\"</span>);\n    registry.setPassword(<span class=\"hljs-string\">\"\"</span>);\n    <span class=\"hljs-comment\">// 注意：ReferenceConfig为重对象，内部封装了与注册中心的连接，以及与服务提供方的连接</span>\n\n    <span class=\"hljs-comment\">// 引用远程服务</span>\n    ReferenceConfig&lt;DemoService&gt; reference\n        = <span class=\"hljs-keyword\">new</span> ReferenceConfig&lt;&gt;(); <span class=\"hljs-comment\">// 此实例很重，封装了与注册中心的连接以及与提供者的连接，请自行缓存，否则可能造成内存和连接泄漏</span>\n    reference.setApplication(application);\n    reference.setRegistry(registry); <span class=\"hljs-comment\">// 多个注册中心可以用setRegistries()</span>\n    reference.setInterface(DemoService<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n    reference.setVersion(<span class=\"hljs-string\">\"1.0.0\"</span>);\n    reference.setGroup(<span class=\"hljs-string\">\"tc\"</span>);\n    reference.setCheck(<span class=\"hljs-keyword\">true</span>);\n    reference.setTimeout(<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span>);\n\n    <span class=\"hljs-comment\">// 和本地bean一样使用xxxService</span>\n    DemoService demoService = reference.get(); <span class=\"hljs-comment\">// 注意：此代理对象内部封装了所有通讯细节，对象较重，请缓存复用</span>\n    System.out.println(demoService.sayHello(<span class=\"hljs-keyword\">new</span> User(<span class=\"hljs-string\">\"tc\"</span>, <span class=\"hljs-number\">18</span>)));\n\n    TimeUnit.MINUTES.sleep(<span class=\"hljs-number\">10</span>);\n}\n</code></pre>\n<p><img src=\"../../img/blog/dubbo-go-vernacular.resources/dfsa02.png\" alt=\"dfsa02.png\"></p>\n<p>desc 肉眼可见的是 <code>Lcom/funnycode/User</code>，这个就是正确的对象了。</p>\n<h4>2.4.2 查找 dubbogo 为什么不对</h4>\n<p>代码位置：</p>\n<p><code>protocol/dubbo/impl/hessian.go:120#marshalRequest</code></p>\n<p>代码实现：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">marshalRequest</span><span class=\"hljs-params\">(encoder *hessian.Encoder, p DubboPackage)</span> <span class=\"hljs-params\">([]<span class=\"hljs-keyword\">byte</span>, error)</span></span> {\n\tservice := p.Service\n\trequest := EnsureRequestPayload(p.Body)\n\tencoder.Encode(DEFAULT_DUBBO_PROTOCOL_VERSION)\n\tencoder.Encode(service.Path)\n\tencoder.Encode(service.Version)\n\tencoder.Encode(service.Method)\n\n\targs, ok := request.Params.([]<span class=\"hljs-keyword\">interface</span>{})\n\n\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\tlogger.Infof(<span class=\"hljs-string\">\"request args are: %+v\"</span>, request.Params)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, perrors.Errorf(<span class=\"hljs-string\">\"@params is not of type: []interface{}\"</span>)\n\t}\n\ttypes, err := getArgsTypeList(args)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, perrors.Wrapf(err, <span class=\"hljs-string\">\" PackRequest(args:%+v)\"</span>, args)\n\t}\n\tencoder.Encode(types)\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> args {\n\t\tencoder.Encode(v)\n\t}\n\n\t......\n}\n</code></pre>\n<p>断点可以发现，types 返回的时候就已经是 <code>Object</code> 了，没有返回 <code>User</code>，那么继续跟进去查看代码。</p>\n<ul>\n<li><code>protocol/dubbo/impl/hessian.go:394#getArgsTypeList</code></li>\n<li><code>protocol/dubbo/impl/hessian.go:418#getArgType</code></li>\n</ul>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getArgType</span><span class=\"hljs-params\">(v <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-title\">string</span></span> {\n  <span class=\"hljs-comment\">// 常见的类型处理</span>\n\n  ......\n\n  <span class=\"hljs-keyword\">default</span>:\n    t := reflect.TypeOf(v)\n    <span class=\"hljs-keyword\">if</span> reflect.Ptr == t.Kind() {\n      t = reflect.TypeOf(reflect.ValueOf(v).Elem())\n    }\n    <span class=\"hljs-keyword\">switch</span> t.Kind() {\n    <span class=\"hljs-keyword\">case</span> reflect.Struct:\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"java.lang.Object\"</span>\n    }\n    ......\n}\n</code></pre>\n<p>很明显当发现是 <code>reflect.Struct</code> 的时候就返回了 <code>java.lang.Object</code>，所以参数就变成了 <code>Object</code>，那么因为 Java 代码那边依赖这个类型所以就调用失败了。</p>\n<h4>2.4.3 其它版本验证</h4>\n<p>因为反馈是 2.7.7 出错，所以先考虑到在之前的版本是否功能正常，于是把服务提供者切换到 dubbo 2.7.3，发现调用仍然有错误，如下：</p>\n<pre><code class=\"language-bash\">2020-12-02T21:52:25.945+0800    INFO    getty/listener.go:85    session{session session-closed, Read Bytes: 4586, Write Bytes: 232, Read Pkgs: 0, Write Pkgs: 1} got error{java exception:org.apache.dubbo.rpc.RpcException: Failed to invoke remote proxy method sayHello to registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=demoProvider&amp;dubbo=2.0.2&amp;<span class=\"hljs-built_in\">export</span>=dubbo%3A%2F%2F192.168.0.113%3A12345%2Fcom.funnycode.DemoService%3Fanyhost%3Dtrue%26application%3DdemoProvider%26bind.ip%3D192.168.0.113%26bind.port%3D12345%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26generic%3Dfalse%26group%3Dtc%26interface%3Dcom.funnycode.DemoService%26methods%3DsayHello%26pid%3D23889%26register%3Dtrue%26release%3D2.7.3%26revision%3D1.0.0%26side%3Dprovider%26threads%3D200%26timeout%3D60000%26timestamp%3D1606916702204%26version%3D1.0.0&amp;pid=23889&amp;registry=zookeeper&amp;release=2.7.3&amp;timestamp=1606916702193, cause: Not found method <span class=\"hljs-string\">\"sayHello\"</span> <span class=\"hljs-keyword\">in</span> class com.funnycode.DemoServiceImpl.\norg.apache.dubbo.rpc.RpcException: Failed to invoke remote proxy method sayHello to registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=demoProvider&amp;dubbo=2.0.2&amp;<span class=\"hljs-built_in\">export</span>=dubbo%3A%2F%2F192.168.0.113%3A12345%2Fcom.funnycode.DemoService%3Fanyhost%3Dtrue%26application%3DdemoProvider%26bind.ip%3D192.168.0.113%26bind.port%3D12345%26deprecated%3Dfalse%26dubbo%3D2.0.2%26dynamic%3Dtrue%26generic%3Dfalse%26group%3Dtc%26interface%3Dcom.funnycode.DemoService%26methods%3DsayHello%26pid%3D23889%26register%3Dtrue%26release%3D2.7.3%26revision%3D1.0.0%26side%3Dprovider%26threads%3D200%26timeout%3D60000%26timestamp%3D1606916702204%26version%3D1.0.0&amp;pid=23889&amp;registry=zookeeper&amp;release=2.7.3&amp;timestamp=1606916702193, cause: Not found method <span class=\"hljs-string\">\"sayHello\"</span> <span class=\"hljs-keyword\">in</span> class com.funnycode.DemoServiceImpl.\n        at org.apache.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:107)\n        at org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker.invoke(DelegateProviderMetaDataInvoker.java:56)\n        at org.apache.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:56)\n        at org.apache.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:55)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:92)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:48)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:81)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:96)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:148)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:41)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$1</span>.invoke(ProtocolFilterWrapper.java:82)\n        at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper<span class=\"hljs-variable\">$CallbackRegistrationInvoker</span>.invoke(ProtocolFilterWrapper.java:157)\n        at org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol<span class=\"hljs-variable\">$1</span>.reply(DubboProtocol.java:152)\n        at org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.handleRequest(HeaderExchangeHandler.java:102)\n        at org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:193)\n        at org.apache.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:51)\n        at org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:57)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.dubbo.common.bytecode.NoSuchMethodException: Not found method <span class=\"hljs-string\">\"sayHello\"</span> <span class=\"hljs-keyword\">in</span> class com.funnycode.DemoServiceImpl.\n        at org.apache.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)\n        at org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory<span class=\"hljs-variable\">$1</span>.doInvoke(JavassistProxyFactory.java:47)\n        at org.apache.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:84)\n        ... 27 more\n}, will be closed.\n</code></pre>\n<p>虽然和 2.7.7 的代码是不一样的，但是通过错误也能看出来是在代理增强类里面方法找不到，大概率是反射找不到方法，所以归根结底也是参数的问题。</p>\n<h4>2.4.4 修复问题</h4>\n<p>修复相对简单，就是拿到 <code>struct</code> 定义的 <code>JavaClassName</code>。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">case</span> reflect.Struct:\n  v, ok := v.(hessian.POJO)\n  <span class=\"hljs-keyword\">if</span> ok {\n    <span class=\"hljs-keyword\">return</span> v.JavaClassName()\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"java.lang.Object\"</span>\n</code></pre>\n<h4>2.4.3 验证结果</h4>\n<p>再次执行消费者，运行（提供方 2.7.7 和 2.7.3）正常，输出如下：</p>\n<pre><code class=\"language-bash\">[2020-12-03/20:04:06 main.main: client.go: 29] response result: Hello tc\n...\n[2020-12-03/20:04:09 main.main: client.go: 41] response result: Hello tc You are 18\n...\n[2020-12-03/20:04:09 main.main: client.go: 48] response result: Hello tc You are 18\n</code></pre>\n<h2>三、细节叨叨</h2>\n<h3>3.1 如何配置 dubbgo 消费者</h3>\n<p>细心的你是否已经发现，在我 dubbogo 的消费端接口叫 <code>DemoProvider</code>，然后发现提供者叫 <code>DemoService</code>，这个又是如何正常运行的？</p>\n<p>实际上和 <code>client.yml</code> 中配置项 <code>references</code> 有关，在配置文件详细说明了 <code>interface</code>，<code>version</code>，<code>group</code> 等，你还可以通过 methods 配置方法的超时时间等信息。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">references:</span>\n  <span class=\"hljs-attr\">\"DemoProvider\":</span>\n    <span class=\"hljs-comment\"># 可以指定多个registry，使用逗号隔开;不指定默认向所有注册中心注册</span>\n    <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"zk1\"</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"dubbo\"</span>\n    <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"com.funnycode.DemoService\"</span>\n    <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">\"failover\"</span>\n    <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n    <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">\"tc\"</span>\n    <span class=\"hljs-attr\">methods:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"SayHello\"</span>\n        <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-string\">......</span>\n</code></pre>\n<h3>3.2 全局的 group 和 version 怎么配置</h3>\n<p>配置文件如下：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-comment\"># application config</span>\n<span class=\"hljs-attr\">application:</span>\n  <span class=\"hljs-attr\">organization:</span> <span class=\"hljs-string\">\"dubbogoproxy.com\"</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"Demo Micro Service\"</span>\n  <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">\"dubbogoproxy tc client\"</span>\n  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n  <span class=\"hljs-attr\">group:</span> <span class=\"hljs-string\">\"tc\"</span>\n  <span class=\"hljs-attr\">owner:</span> <span class=\"hljs-string\">\"ZX\"</span>\n  <span class=\"hljs-attr\">environment:</span> <span class=\"hljs-string\">\"dev\"</span>\n\n<span class=\"hljs-attr\">references:</span>\n  <span class=\"hljs-attr\">\"DemoProvider\":</span>\n    <span class=\"hljs-comment\"># 可以指定多个registry，使用逗号隔开;不指定默认向所有注册中心注册</span>\n    <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"zk1\"</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"dubbo\"</span>\n    <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"com.funnycode.DemoService\"</span>\n    <span class=\"hljs-attr\">cluster:</span> <span class=\"hljs-string\">\"failover\"</span>\n<span class=\"hljs-comment\">#    version: \"1.0.0\"</span>\n<span class=\"hljs-comment\">#    group: \"tc\"</span>\n    <span class=\"hljs-attr\">methods:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"SayHello\"</span>\n        <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>从使用的习惯来讲，肯定是 <code>application</code> 表示了全局的配置，但是我发现启动的时候在 <code>application</code> 配置的 <code>version</code> 和 <code>group</code> 并不会赋值给接口，启动会报服务提供方找不到，如下：</p>\n<pre><code class=\"language-bash\">2020-12-03T20:15:42.208+0800    DEBUG   zookeeper/registry.go:237       Create a zookeeper node:/dubbo/com.funnycode.DemoService/consumers/consumer%3A%2F%2F30.11.176.107%2FDemoProvider%3Fapp.version%3D1.0.0%26application%3DDemo+Micro+Service%26async%3Dfalse%26bean.name%3DDemoProvider%26cluster%3Dfailover%26environment%3Ddev%26generic%3Dfalse%26group%3D%26interface%3Dcom.funnycode.DemoService%26ip%3D30.11.176.107%26loadbalance%3D%26methods.SayHello.loadbalance%3D%26methods.SayHello.retries%3D3%26methods.SayHello.sticky%3Dfalse%26module%3Ddubbogoproxy+tc+client%26name%3DDemo+Micro+Service%26organization%3Ddubbogoproxy.com%26owner%3DZX%26pid%3D38692%26protocol%3Ddubbo%26provided-by%3D%26reference.filter%3Dcshutdown%26registry.role%3D0%26release%3Ddubbo-golang-1.3.0%26retries%3D%26side%3Dconsumer%26sticky%3Dfalse%26timestamp%3D1606997742%26version%3D\n</code></pre>\n<p><code>version</code> 和 <code>group</code> 都是空。必须把 <code>DemoProvider</code> 下的 <code>version</code> 和 <code>group</code> 注释打开。</p>\n<h3>3.3 怎么指定调用的方法名</h3>\n<h4>3.3.1 go 调用 java</h4>\n<p>dubbogo 调用 dubbo，因为 go 是大写的方法名，java 里面是小写的方法名，所以会出现如下错误：</p>\n<pre><code class=\"language-bash\">2020-12-02T17:10:47.739+0800    INFO    getty/listener.go:87    session{session session-closed, Read Bytes: 924, Write Bytes: 199, Read Pkgs: 0, Write Pkgs: 1} got error{java exception:Fail to decode request due to: java.lang.IllegalArgumentException: Service not found:com.funnycode.DemoService, SayHello\njava.lang.IllegalArgumentException: Service not found:com.funnycode.DemoService, SayHello\n        at org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation.decode(DecodeableRpcInvocation.java:134)\n        at org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation.decode(DecodeableRpcInvocation.java:80)\n        at org.apache.dubbo.remoting.transport.DecodeHandler.decode(DecodeHandler.java:57)\n        at org.apache.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:44)\n        at org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:57)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor<span class=\"hljs-variable\">$Worker</span>.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)\n}, will be closed.\n</code></pre>\n<p>细心的读者可能已经注意到了，我在消费端的接口声明是有个 <code>dubbo:&quot;sayHello&quot;</code> 的，表示方法名是 sayHello，这样在服务提供方就可以得到 sayHello 这个方法名。</p>\n<p>还有我声明的三个方法都指明它们的方法名叫 <code>dubbo:&quot;sayHello&quot;</code>，这是因为 Java 可以方法名字一样进行重载，而 go 是不能方法名重复的。</p>\n<h4>3.3.2 go 调用 go</h4>\n<blockquote>\n<p>直接贴能跑通的代码</p>\n</blockquote>\n<p>我的提供者接口：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> DemoProvider <span class=\"hljs-keyword\">struct</span>{}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">SayHello</span><span class=\"hljs-params\">(ctx context.Context, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">SayHello4</span><span class=\"hljs-params\">(ctx context.Context, user *User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + user.Name + <span class=\"hljs-string\">\" You are \"</span> + strconv.Itoa(user.Age), <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">SayHello5</span><span class=\"hljs-params\">(ctx context.Context, user *User, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name + <span class=\"hljs-string\">\" You are \"</span> + strconv.Itoa(user.Age), <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"DemoProvider\"</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *DemoProvider)</span> <span class=\"hljs-title\">MethodMapper</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">map</span>[<span class=\"hljs-title\">string</span>]<span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>{\n\t\t<span class=\"hljs-string\">\"SayHello\"</span>: <span class=\"hljs-string\">\"sayHello\"</span>,\n\t}\n}\n</code></pre>\n<p>我的消费者接口：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> DemoProvider <span class=\"hljs-keyword\">struct</span> {\n  <span class=\"hljs-comment\">// 调用 java 和 go</span>\n\tSayHello  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span>             `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n  <span class=\"hljs-comment\">// 只调用 java</span>\n\tSayHello2 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user *User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span>              `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n\tSayHello3 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user *User, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span> `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">sayHello</span>\"`</span>\n  <span class=\"hljs-comment\">// 只调用 go</span>\n\tSayHello4 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user *User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span>\n\tSayHello5 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user *User, name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span>\n}\n</code></pre>\n<p>启动服务消费者：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.Load()\n\tgxlog.CInfo(<span class=\"hljs-string\">\"\\n\\n\\nstart to test dubbo\"</span>)\n\n\tres, err := demoProvider.SayHello(context.TODO(), <span class=\"hljs-string\">\"tc\"</span>)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tuser := &amp;User{\n\t\tName: <span class=\"hljs-string\">\"tc\"</span>,\n\t\tAge:  <span class=\"hljs-number\">18</span>,\n\t}\n\n\tres, err = demoProvider.SayHello4(context.TODO(), user)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tres, err = demoProvider.SayHello5(context.TODO(), user, <span class=\"hljs-string\">\"tc\"</span>)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\n\tgxlog.CInfo(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, res)\n\n\tinitSignal()\n}\n</code></pre>\n<p>这里需要注意 <code>MethodMapper</code> 方法，有时候需要在这个方法中配置方法名的映射关系，否则还是会出现找不到方法的错误。</p>\n<p>比如因为配置 <code>dubbo:&quot;sayHello&quot;</code> ，所以在 go 里面请求 <code>SayHello</code> 变成了 <code>sayHello</code>，那么服务提供方通过 <code>MethodMapper</code> 方法配置后使得提供方也是 <code>sayHello</code>，这样 go 和 java 下暴露的都是小写的 <code>sayHello</code>。</p>\n<h3>3.4 为什么会用 hessian2</h3>\n<p>老司机都懂，在 dubbo 中 SPI 机制的默认值就是 hessian2</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@SPI</span>(<span class=\"hljs-string\">\"hessian2\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Serialization</span> </span>{\n}\n</code></pre>\n<p>而在 dubbo-go 中：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDubboCodec</span><span class=\"hljs-params\">(reader *bufio.Reader)</span> *<span class=\"hljs-title\">ProtocolCodec</span></span> {\n\ts, _ := GetSerializerById(constant.S_Hessian2)\n\t<span class=\"hljs-keyword\">return</span> &amp;ProtocolCodec{\n\t\treader:     reader,\n\t\tpkgType:    <span class=\"hljs-number\">0</span>,\n\t\tbodyLen:    <span class=\"hljs-number\">0</span>,\n\t\theaderRead: <span class=\"hljs-literal\">false</span>,\n\t\tserializer: s.(Serializer),\n\t}\n}\n</code></pre>\n<h3>3.5 hessian序列化源码</h3>\n<blockquote>\n<p>可以自行断点查看，两边基本上一样，我也是通过两边比出来的，RpcInvocation.getParameterTypesDesc() 就是方法的参数</p>\n</blockquote>\n<ul>\n<li>go 代码 <code>protocol/dubbo/impl/hessian.go:120#marshalRequest</code></li>\n<li>java 代码 <code>org.apache.dubbo.rpc.protocol.dubbo.DubboCodec#encodeRequestData(org.apache.dubbo.remoting.Channel, org.apache.dubbo.common.serialize.ObjectOutput, java.lang.Object, java.lang.String)</code></li>\n</ul>\n<h3>3.6 dubbogo 服务提供者的方法对象需要是指针对象</h3>\n<p>之前的例子都是 copy 的，这次是纯手打的，才发现了这个问题。</p>\n<p>如果你的提供类似：<code>func (p *DemoProvider) SayHello4(ctx context.Context, user User) (string, error)</code>，那么会出现如下错误：</p>\n<pre><code class=\"language-bash\">2020-12-03T12:42:32.834+0800    ERROR   getty/listener.go:280   OnMessage panic: reflect: Call using *main.User as <span class=\"hljs-built_in\">type</span> main.User\ngithub.com/apache/dubbo-go/remoting/getty.(*RpcServerHandler).OnMessage.func1\n</code></pre>\n<p>参数里面的 <code>User</code> 需要改成 <code>*User</code>。</p>\n<h3>3.7 dubbogo 服务消费者的方法对象可以是非指针对象</h3>\n<pre><code class=\"language-go\">SayHello4 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user *User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span>\n<span class=\"hljs-comment\">// or</span>\nSayHello4 <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, user User)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span>\n</code></pre>\n<p>因为在参数序列化的时候会对指针做操作：</p>\n<pre><code class=\"language-go\">t := reflect.TypeOf(v)\n<span class=\"hljs-keyword\">if</span> reflect.Ptr == t.Kind() {\n  t = reflect.TypeOf(reflect.ValueOf(v).Elem())\n}\n</code></pre>\n<p><a href=\"https://github.com/apache/dubbo-go/blob/v1.5.4/protocol/dubbo/impl/hessian.go#L486\">完整代码</a></p>\n<h3>3.8 配置文件说明</h3>\n<p>dubbogo 主要有三个配置文件：</p>\n<ul>\n<li>server.yaml 服务提供方的配置文件</li>\n<li>client.yaml 服务消费方的配置文件</li>\n<li>log.yaml 日志文件</li>\n</ul>\n<p>如果你什么都不配置，会出现：</p>\n<pre><code class=\"language-bash\">2021/01/11 15:31:41 [InitLog] warn: <span class=\"hljs-built_in\">log</span> configure file name is nil\n2021/01/11 15:31:41 [consumerInit] application configure(consumer) file name is nil\n2021/01/11 15:31:41 [providerInit] application configure(provider) file name is nil\n</code></pre>\n<p>这样是没法正常使用的。如果你是服务提供方，必须要配置 server.yaml 文件，如果你是服务消费方，必须要配置 client.yaml，实际我们的应用应该既是消费者又是提供者，所以往往两个文件都是需要配置的。</p>\n<p>服务提供方正常启动是会有如下输出的：</p>\n<pre><code class=\"language-bash\">2021-01-11T15:36:55.003+0800    INFO    protocol/protocol.go:205        The cached exporter keys is dubbo://:20000/DemoProvider?accesslog=&amp;app.version=1.0.0&amp;application=Demo+Micro+Service&amp;auth=&amp;bean.name=DemoProvider&amp;cluster=failover&amp;environment=dev&amp;execute.limit=&amp;execute.limit.rejected.handler=&amp;group=tc&amp;interface=com.funnycode.DemoService&amp;loadbalance=random&amp;methods.SayHello.loadbalance=random&amp;methods.SayHello.retries=3&amp;methods.SayHello.tps.limit.interval=&amp;methods.SayHello.tps.limit.rate=&amp;methods.SayHello.tps.limit.strategy=&amp;methods.SayHello.weight=0&amp;methods.SayHello4.loadbalance=random&amp;methods.SayHello4.retries=3&amp;methods.SayHello4.tps.limit.interval=&amp;methods.SayHello4.tps.limit.rate=&amp;methods.SayHello4.tps.limit.strategy=&amp;methods.SayHello4.weight=0&amp;methods.SayHello5.loadbalance=random&amp;methods.SayHello5.retries=3&amp;methods.SayHello5.tps.limit.interval=&amp;methods.SayHello5.tps.limit.rate=&amp;methods.SayHello5.tps.limit.strategy=&amp;methods.SayHello5.weight=0&amp;module=dubbogoproxy+tc+client&amp;name=Demo+Micro+Service&amp;organization=dubbogoproxy.com&amp;owner=ZX&amp;param.sign=&amp;registry.role=3&amp;release=dubbo-golang-1.3.0&amp;retries=&amp;serialization=&amp;service.filter=<span class=\"hljs-built_in\">echo</span>%2Ctoken%2Caccesslog%2Ctps%2Cgeneric_service%2Cexecute%2Cpshutdown&amp;side=provider&amp;ssl-enabled=<span class=\"hljs-literal\">false</span>&amp;timestamp=1610350614&amp;tps.limit.interval=&amp;tps.limit.rate=&amp;tps.limit.rejected.handler=&amp;tps.limit.strategy=&amp;tps.limiter=&amp;version=1.0.0&amp;warmup=100!\n2021-01-11T15:36:55.003+0800    INFO    dubbo/dubbo_protocol.go:86      Export service: dubbo://:20000/DemoProvider?accesslog=&amp;app.version=1.0.0&amp;application=Demo+Micro+Service&amp;auth=&amp;bean.name=DemoProvider&amp;cluster=failover&amp;environment=dev&amp;execute.limit=&amp;execute.limit.rejected.handler=&amp;group=tc&amp;interface=com.funnycode.DemoService&amp;loadbalance=random&amp;methods.SayHello.loadbalance=random&amp;methods.SayHello.retries=3&amp;methods.SayHello.tps.limit.interval=&amp;methods.SayHello.tps.limit.rate=&amp;methods.SayHello.tps.limit.strategy=&amp;methods.SayHello.weight=0&amp;methods.SayHello4.loadbalance=random&amp;methods.SayHello4.retries=3&amp;methods.SayHello4.tps.limit.interval=&amp;methods.SayHello4.tps.limit.rate=&amp;methods.SayHello4.tps.limit.strategy=&amp;methods.SayHello4.weight=0&amp;methods.SayHello5.loadbalance=random&amp;methods.SayHello5.retries=3&amp;methods.SayHello5.tps.limit.interval=&amp;methods.SayHello5.tps.limit.rate=&amp;methods.SayHello5.tps.limit.strategy=&amp;methods.SayHello5.weight=0&amp;module=dubbogoproxy+tc+client&amp;name=Demo+Micro+Service&amp;organization=dubbogoproxy.com&amp;owner=ZX&amp;param.sign=&amp;registry.role=3&amp;release=dubbo-golang-1.3.0&amp;retries=&amp;serialization=&amp;service.filter=<span class=\"hljs-built_in\">echo</span>%2Ctoken%2Caccesslog%2Ctps%2Cgeneric_service%2Cexecute%2Cpshutdown&amp;side=provider&amp;ssl-enabled=<span class=\"hljs-literal\">false</span>&amp;timestamp=1610350614&amp;tps.limit.interval=&amp;tps.limit.rate=&amp;tps.limit.rejected.handler=&amp;tps.limit.strategy=&amp;tps.limiter=&amp;version=1.0.0&amp;warmup=100\n</code></pre>\n<h3>3.9 复现代码</h3>\n<ul>\n<li><a href=\"https://github.com/cityiron/java_study/tree/master/dubbo2.7.7/dg-issue900\">https://github.com/cityiron/java_study/tree/master/dubbo2.7.7/dg-issue900</a></li>\n<li><a href=\"https://github.com/cityiron/golang_study/tree/master/dubbogo/1.5.4/arg-bug\">https://github.com/cityiron/golang_study/tree/master/dubbogo/1.5.4/arg-bug</a></li>\n</ul>\n<h2>四、参考</h2>\n<ul>\n<li><a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/configuration/api/\">https://dubbo.apache.org/zh/docs/v2.7/user/configuration/api/</a></li>\n<li><a href=\"https://github.com/apache/dubbo-go/issues/257\">https://github.com/apache/dubbo-go/issues/257</a></li>\n</ul>\n<hr>\n<p>篇幅有限，就介绍到这里。欢迎有兴趣的同学来参与 <a href=\"https://github.com/apache/dubbo-go/tree/3.0\">dubbogo3.0</a> 的建设，感谢阅读。</p>\n",
  "link": "/zh-cn/blog/dubbo-go-vernacular.html",
  "meta": {
    "title": "\"dubbo-go 白话文\"",
    "linkTitle": "\"dubbo-go 白话文\"",
    "date": "2021-02-20",
    "description": ">",
    "本文手把手教你使用 dubbogo 调用 dubbogo 或 dubbo 提供的服务提供方": ""
  }
}