{
  "filename": "dubbo-go-experience.md",
  "__html": "<h1>dubbo-go 踩坑记</h1>\n<h2>扯淡</h2>\n<h3>前尘</h3>\n<p>由于我的一个项目需要做公司用户鉴权，而组内其他小伙伴刚好有一个 <em>dubbo</em> 的鉴权 <em>rpc</em> ，一开始我是打算直接的读 <em>redis</em> 数据然后自己做解密。工作进行到一半，由于考虑到如果以后这个服务有任何变动，我这边要有联动行为，所以改用 <em>go</em> 来调用 <em>dubbo</em> 的 <em>rpc</em> ，于是我在 <em>github</em> 上找到了 <a href=\"https://github.com/AlexStocks\">雨神</a> 的 <a href=\"https://github.com/AlexStocks/dubbogo\">dubbogo</a> (PS: 这个是 <em>dubbo-go</em> 前身)。不得不说，雨神是热心的人儿啊，当时还帮着我调试代码。最后也是接入了一个阉割版的吧，主要是当时 <em>hessian2</em> 对泛型支持的不怎么好。</p>\n<h3>现在</h3>\n<p>目前 <a href=\"https://github.com/apache/dubbo-go\">dubbo-go</a>隶属于 <em>apache</em> 社区，相比以前做了部分重构，并且维护也很活跃了。</p>\n<h2>接入</h2>\n<h3>问题</h3>\n<p>目前整个项目在快速的迭代中，很多功能还没有完善，维护人员还没有时间来完善文档，所以在接入的时候要自己看源码或调试。</p>\n<h3>说明</h3>\n<p>目前我司在使用 <em>dubbo</em> 的过程使用的 <em>zookeeper</em> 作为注册中心，序列化是 <em>hessian2</em> ，所以我们要做如下初始化：</p>\n<pre><code class=\"language-go\">  <span class=\"hljs-keyword\">import</span> (\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/proxy/proxy_factory\"</span>\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/protocol\"</span>\n\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/filter/impl\"</span>\n\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/cluster_impl\"</span>\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/loadbalance\"</span>\n      _ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/zookeeper\"</span>\n  )\n</code></pre>\n<h3>配置</h3>\n<p>由于我是接入客户端，所以我这边只配置了 <em>ConsumerConfig</em> 。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">dubbo:</span>\n    <span class=\"hljs-comment\"># client</span>\n    <span class=\"hljs-attr\">request_timeout:</span> <span class=\"hljs-string\">\"3s\"</span>\n    <span class=\"hljs-comment\"># connect timeout</span>\n    <span class=\"hljs-attr\">connect_timeout:</span> <span class=\"hljs-string\">\"3s\"</span>\n    <span class=\"hljs-attr\">check:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">application:</span>\n        <span class=\"hljs-attr\">organization:</span> <span class=\"hljs-string\">\"dfire.com\"</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"soa.sso.ITokenService\"</span>\n        <span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">\"dubbogo token service client\"</span>\n        <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n        <span class=\"hljs-attr\">owner:</span> <span class=\"hljs-string\">\"congbai\"</span>\n    <span class=\"hljs-attr\">registries:</span>\n        <span class=\"hljs-attr\">\"hangzhouzk\":</span>\n            <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"zookeeper\"</span>\n            <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">\"3s\"</span>\n            <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">\"zk1.2dfire-daily.com:2181\"</span>\n            <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">\"\"</span>\n            <span class=\"hljs-attr\">password:</span> <span class=\"hljs-string\">\"\"</span>\n    <span class=\"hljs-attr\">references:</span>\n        <span class=\"hljs-attr\">\"ITokenService\":</span>\n            <span class=\"hljs-attr\">registry:</span> <span class=\"hljs-string\">\"hangzhouzk\"</span>\n            <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">\"dubbo\"</span>\n            <span class=\"hljs-attr\">interface:</span> <span class=\"hljs-string\">\"com.dfire.soa.sso.ITokenService\"</span>\n            <span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"1.0.0\"</span>\n            <span class=\"hljs-attr\">methods:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">\"validate\"</span>\n            <span class=\"hljs-attr\">retries:</span> <span class=\"hljs-string\">\"3\"</span>\n</code></pre>\n<p>我这里是把 <em>dubbo-go</em> 作为第三方库来用，所以我没使用官方 <a href=\"https://github.com/dubbogo/dubbo-samples/golang\">dubbo-samples</a> 那样在 <em>init</em> 函数中读入配置。</p>\n<p>配置代码如下：</p>\n<pre><code class=\"language-go\">  <span class=\"hljs-keyword\">import</span> (\n      <span class=\"hljs-string\">\"github.com/apache/dubbo-go/config\"</span>\n      <span class=\"hljs-string\">\"github.com/apache/dubbo-go/protocol/dubbo\"</span>\n  )\n\n  <span class=\"hljs-keyword\">type</span> DubboCli <span class=\"hljs-keyword\">struct</span> {\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewCli</span><span class=\"hljs-params\">(cconf config.ConsumerConfig)</span> *<span class=\"hljs-title\">DubboCli</span></span> {\n      config.SetConsumerConfig(cconf)\n\n      dubbo.SetClientConf(dubbo.GetDefaultClientConfig())\n\n      config.Load()\n\n      <span class=\"hljs-keyword\">return</span> &amp;DubboCli{}\n  }\n</code></pre>\n<h3>接入</h3>\n<p>好了，配置加载完就说明我们的准备工作已经做好了，接下来就要接入 <em>rpc</em> 接口了。</p>\n<h4>返回值</h4>\n<p>一般 <em>rpc</em> 调用的返回值都是自定义的，所以我们也要告诉 <em>dubbo-go</em> 长什么样子。这个结构体要跟 <em>java</em> 的类对应起来，这里我们是要实现\n<em>hessian2</em>  的 <em>interface</em> :</p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// POJO interface</span>\n<span class=\"hljs-comment\">// !!! Pls attention that Every field name should be upper case.</span>\n<span class=\"hljs-comment\">// Otherwise the app may panic.</span>\n<span class=\"hljs-keyword\">type</span> POJO <span class=\"hljs-keyword\">interface</span> {\n\tJavaClassName() <span class=\"hljs-keyword\">string</span> <span class=\"hljs-comment\">// got a go struct's Java Class package name which should be a POJO class.</span>\n}\n</code></pre>\n<p>我的实现如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> Result <span class=\"hljs-keyword\">struct</span> {\n\tModel       <span class=\"hljs-keyword\">interface</span>{}   <span class=\"hljs-string\">`json:\"model,omitempty\"`</span>\n\tModels      []<span class=\"hljs-keyword\">interface</span>{} <span class=\"hljs-string\">`json:\"models,omitempty\"`</span>\n\tResultCode  <span class=\"hljs-keyword\">string</span>        <span class=\"hljs-string\">`json:\"resultCode\"`</span>\n\tSuccess     <span class=\"hljs-keyword\">bool</span>          <span class=\"hljs-string\">`json:\"success\"`</span>\n\tMessage     <span class=\"hljs-keyword\">string</span>        <span class=\"hljs-string\">`json:\"message\"`</span>\n\tTotalRecord <span class=\"hljs-keyword\">int</span>           <span class=\"hljs-string\">`json:\"totalRecord\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r Result)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.twodfire.share.result.ResultSupport\"</span>\n}\n</code></pre>\n<p>这里的 <em>JavaClassName</em> 接口的意义就如函数签名一样，返回的就是 <em>java</em> 的类名。</p>\n<h4>接口</h4>\n<p>要想调用 <em>dubbo</em> 的接口就必须实现下面这个 <em>interface</em></p>\n<pre><code class=\"language-go\"><span class=\"hljs-comment\">// rpc service interface</span>\n<span class=\"hljs-keyword\">type</span> RPCService <span class=\"hljs-keyword\">interface</span> {\n\tReference() <span class=\"hljs-keyword\">string</span> <span class=\"hljs-comment\">// rpc service id or reference id</span>\n}\n</code></pre>\n<p>所以我需要构造一个 <em>struct</em> 来做这个事情，比如：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> ITokenService <span class=\"hljs-keyword\">struct</span> {\n\tValidate <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, req []<span class=\"hljs-keyword\">interface</span>{}, resp *Result)</span> <span class=\"hljs-title\">error</span> `<span class=\"hljs-title\">dubbo</span>:\"<span class=\"hljs-title\">validate</span>\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(i *ITokenService)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"ITokenService\"</span>\n}\n</code></pre>\n<p>这个结构体一般是不会有什么数据成员。</p>\n<p>这里我们注意到 <em>Validate</em> 函数声明后面跟的 <em>dubbo tag</em> ，这个是为如果 <em>rpc</em> 名称的首字母是小写（比如我要调用的 <em>dubbo</em> 接口就是 <em>validate</em> )准备的 <em>MethodMapper</em> ，类似于 <em>json</em> 的映射 <em>tag</em> 功效。一开始我就是遇到这个坑，我按官方的例子实现，日志一直说找不到接口，后来我也在官方群里询问大佬才知道有这个功能。</p>\n<h4>注册</h4>\n<p>好了，上面的准备全部完成后，我们要做最后一步，那就是告诉 <em>dubbo-go</em> 我们想要的是什么。代码如下：</p>\n<pre><code class=\"language-go\">  <span class=\"hljs-keyword\">import</span> (\n      hessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n      <span class=\"hljs-string\">\"github.com/apache/dubbo-go/config\"</span>\n  )\n\n  <span class=\"hljs-keyword\">var</span> tokenProvider = <span class=\"hljs-built_in\">new</span>(ITokenService)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n      config.SetConsumerService(tokenProvider)\n      hessian.RegisterPOJO(&amp;Result{})\n  }\n</code></pre>\n<h4>调用</h4>\n<p>接下来我们就可以完成我们的 <em>DubboCli</em> 接口了，代码如下：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(d *DubboCli)</span> <span class=\"hljs-title\">CheckUser</span><span class=\"hljs-params\">(token, app <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> {\n\targs := []<span class=\"hljs-keyword\">interface</span>{}{token, app}\n\tresp := &amp;Result{}\n\n\t<span class=\"hljs-keyword\">if</span> err := tokenProvider.Validate(context.Background(), args, resp); err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, err\n\t}\n\t<span class=\"hljs-keyword\">if</span> resp.Success {\n\t\t<span class=\"hljs-keyword\">return</span> resp.Success, <span class=\"hljs-literal\">nil</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> resp.Success, errors.New(resp.Message)\n}\n</code></pre>\n<p>好了，至此我们就完成了 <em>dubbo-go</em> 的全部接入工作。 Happy Coding...</p>\n<h2>写在最后</h2>\n<p>其实代码格式这个问题，我在接入的时候跟官方群里的维护者大佬提过，使用 <em>go</em> 官方的代码格式工具 <a href=\"https://github.com/golang/tools/tree/master/cmd/goimports\">goimports</a> 来统一代码格式，这\n样对于维护者以外的人提 <em>PR</em> 也是有利。我在接入的过程中遇到一个 <em>bug</em> ，我反馈给雨神，他就让我提了个 <em>PR</em> ，在整个过程就是这个\n代码格式的问题，导致我反复的修改代码。</p>\n",
  "link": "/zh-cn/blog/dubbo-go-experience.html",
  "meta": {
    "title": "dubbo-go 踩坑记",
    "keywords": "\"dubbo-go\", \"踩坑\", \"dubbo-go实践\"",
    "description": "使用dubbo-go的前因后果与踩坑过程。"
  }
}